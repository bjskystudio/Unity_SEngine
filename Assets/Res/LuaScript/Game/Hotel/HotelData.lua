---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asd.
--- DateTime: 2022/10/26 16:56
---

local GameDefine = GameDefine
local GameEvent = require("GameEvent")
local PlayerPrefsUtil = require("PlayerPrefsUtil")
local Config = Config
local ConfigManager = require("ConfigManager")
local TimeUtil = require("TimeUtil")
local EventManager = require("EventManager")
local GameData = require("GameData")
local TimerManager = require("TimerManager")
local TimeUtil = require("TimeUtil")
local DeviceData = require("DeviceData")
local UIManager = require("UIManager")
local UseFurnitureState = require("UseFurnitureState")
local MapManager = require("MapManager")

---旅店公共数据管理器（单例）
---@class HotelData : Singleton
---@field UnlockHotelList number[] 已经解锁的旅店
---@field FinishTask number[] 已经完成的旅店任务
---@field public TipLevel number 小费等级
---@field public OfflineIncomLevel number 离线收益等级
---@field public HotelPublicityLevel number 旅店宣传等级
---@field public HotelTaskMap table<number,number> 旅店已完成的任务集合
---@field public SortDataList table 存储任务列表相关数据以及状态
---@field public HotelIncomTime number 上次旅店触发收益时间戳
---@field public HotelOffineCoin number 登录触发离线收益金币数量
---@field public HotelOfflineTime number 登录触发离线收益时间
---@field public HotelIncomTime2 number 上次旅店触发30s收益时间戳
---@field public CoinDatas HotelCoinData[] 旅店金币掉落
---@field public FingerTaskIds number[] 旅店任务手指id
local HotelData = Class("HotelData", Singleton)

function HotelData:__init()
    ---初始化本地数据
    self:InitLocalData()

    ---处理收益
    ---登录后离线的收益
    self:OfflineIncom()

    ---开启在线收益
    self:StartTimer()


end

--region -------------接口----------------------
---或许某个任务类型是否完成
---@param taskType HotelSceneView.HotelTask 任务类型
function HotelData:IsTaskActionFinish(taskType)
    local configs = Config.GetConfigByField(ConfigManager.hotlebuild, "param", { taskType })
    if table.count(configs) > 0 then
        return self.HotelTaskMap[configs[1].id] ~= nil
    else
        return false
    end
end
--endregion -------------接口-----------------------

--region 收益数据
--处理离线收益
function HotelData:OfflineIncom()
    local lastTime = self.HotelIncomTime--上次旅店触发收益时间戳
    --lastTime = TimeUtil.GetSecTime() - 60
    local nowTime = TimeUtil.GetSecTime() --当前时间


    local time = nowTime - lastTime --时间差
    -- print(nowTime .. "   " .. lastTime)
    print("时间差:" .. time)
    --触发一分钟一次的收益
    --一共触发了几次
    local ms = TimeUtil.SECOND_OF_MINUTE

    local cs = Mathf.Floor(time / ms)
    if (cs < 0) then
        return
    end

    local maxOfflineTime = self:GetMyAttribute(HotelData.attributeType.offlineIncom) --离线最大时间

    local showTime = time + self.HotelOfflineTime

    if (showTime >= maxOfflineTime) then
        showTime = maxOfflineTime
    end

    print("触发了: " .. cs .. "次")
    local incomGold = self:FurnitureIncom(cs)
    print("离线收益: " .. incomGold)

    local countNum = incomGold + self.HotelOffineCoin
    local maxCoinNum = self:FurnitureIncom(Mathf.Floor(maxOfflineTime / ms))
    if (countNum >= maxCoinNum) then
        countNum = maxCoinNum
    end
    if (countNum <= 0) then
        print("无离线收益" .. countNum)
        return
    end
    print("上次未领取的收益: " .. self.HotelOffineCoin)
    print("总离线收益: " .. countNum)
    UIManager:GetInstance():OpenUIDefine(UIDefine.OfflineIncomView, nil, countNum, showTime)

    self.HotelOffineCoin = countNum
    self.HotelIncomTime = nowTime
    self.HotelOfflineTime = showTime --记录上次离线的时间
    self:SaveLocalData()

end


--开启倒计时
function HotelData:StartTimer()
    if (self.Timer == nil) then
        self.timeCount = 0
        self.timeCount2 = 0
        --self.GoldCount = 0
        --local nowTime = TimeUtil.GetSecTime()
        self.Timer = TimerManager:GetInstance():GetTimerStart(1, self.OnTimer, self)
    end
end
function HotelData:OnTimer()
    self.timeCount = self.timeCount + 1
    self.timeCount2 = self.timeCount2 + 1

    ---总收益
    local onLineIncom = 0

    ---家具正常挂机收益
    local ms = TimeUtil.SECOND_OF_MINUTE
    -- print(self.timeCount .. "   " .. ms)
    if (self.timeCount >= ms) then
        --触发一分钟一次的收益
        --一共触发了几次
        local cs = Mathf.Floor(self.timeCount / ms)
        --print("触发了: " .. cs .. "次")
        self.timeCount = self.timeCount - ms * cs

        --处理家具收益
        local incomGold = self:FurnitureIncom(cs)


        -- self.GoldCount = self.GoldCount + incomGold
        self.HotelIncomTime = TimeUtil.GetSecTime()--存储此次触发收益时间
        self:SaveLocalData()
        if (incomGold > 0) then
            onLineIncom = onLineIncom + incomGold
        end

    end

    ---家具在线挂机收益30s一次
    local eachTime = ms / 2
    --print(self.timeCount2 .. "   " .. eachTime)
    if (self.timeCount2 == eachTime) then
        --触发30s一次的收益
        --一共触发了几次
        local cs = Mathf.Floor(self.timeCount2 / eachTime)
        --print("触发了: " .. cs .. "次")
        self.timeCount2 = self.timeCount2 - eachTime * cs

        --处理家具收益
        local incomGold = self:FurnitureIncomOnline(cs)
        self.HotelIncomTime2 = TimeUtil.GetSecTime()--存储此次触发收益时间
        self:SaveLocalData()
    end

    if (onLineIncom > 0) then
        GameData:GetInstance():ChangePlayerProp(GameDefine.ePlayerProp.Gold, onLineIncom)
        --print("家具挂机收益累计:  " .. onLineIncom)
        self:SendCoinMoveEvent(onLineIncom)
        onLineIncom = 0
    end

end

---在线30s收益
function HotelData:FurnitureIncomOnline(cs)
    local incomGold = 0
    --所有房间
    local houseData = DeviceData:GetInstance().HouseData
    for i, itemData in pairs(houseData) do
        local houseId = i
        ---@type DeviceFieldData[]
        local fieldDataArray = itemData --当前房间的所有栏位数据

        for j, v in pairs(fieldDataArray) do
            local usingId = v.CurUseFurnitureId --当前栏位正在使用的家具
            local fieldId = DeviceData:GetInstance():GetFieldId(usingId) --获取当前栏位id
            local fData = Config.furniture[fieldId]
            local queueIndex = 1

            if fData.profit_trigger > 0 and fData.profit_trigger == DeviceData.eDevicePropType.ExtIncome then
                local coinPos = MapManager:GetInstance().FurnitureCoinPosDic[fieldId]
                if coinPos ~= nil and queueIndex <= #coinPos then
                    ---@type HotelCoinData
                    local coinData = HotelData:GetInstance():GetOrAddCoinData(houseId, fieldId, queueIndex)
                    coinData.DropCount = coinData.DropCount + 1
                    HotelData:GetInstance():SaveLocalData()
                    ---发送界面事件
                    EventManager:GetInstance():Broadcast(GameEvent.TriggerCoin, coinData)
                end
            end

            --[[            local fData = Config.furniture_level[usingId]
                        local paramTypes = fData.param_type
                        local paramData = fData.param_num
                        for m, v in pairs(paramTypes) do
                            if (v == DeviceData.eDevicePropType.ExtIncome) then
                                --正常挂机家具每30s提供的收益
                                local num = paramData[m]
                                incomGold = incomGold + num * cs
                            end
                        end]]
        end
    end
    return incomGold
end

---在线 或挂机 收益计算
function HotelData:FurnitureIncom(cs)
    local incomGold = 0
    --所有房间
    local houseData = DeviceData:GetInstance().HouseData
    for i, itemData in pairs(houseData) do

        ---@type DeviceFieldData[]
        local fieldDataArray = itemData --当前房间的所有栏位数据

        for j, v in pairs(fieldDataArray) do
            local usingId = v.CurUseFurnitureId --当前栏位正在使用的家具
            local fData = Config.furniture_level[usingId]
            local paramTypes = fData.param_type
            local paramData = fData.param_num
            for m, v in pairs(paramTypes) do
                if (v == DeviceData.eDevicePropType.PassiveIncome) then
                    --正常挂机家具每分钟提供的收益
                    local num = paramData[m]
                    incomGold = incomGold + num * cs
                end
            end
        end
    end
    return incomGold
end
--endregion

---获取或者添加一个金币数据
------@param roomId number 房间id
------@param furnitureFieldId number 家具类型id
------@param dropIndex number 掉落位置
---@return HotelCoinData
function HotelData:GetOrAddCoinData(roomId, furnitureFieldId, dropIndex)
    ---@type HotelCoinData
    local coinData = nil
    for i = 1, #self.CoinDatas do
        if self.CoinDatas[i].RoomId == roomId and
                self.CoinDatas[i].FurnitureFieldId == furnitureFieldId and
                self.CoinDatas[i].DropIndex == dropIndex then
            coinData = self.CoinDatas[i]
            break
        end
    end
    if coinData == nil then
        local triggerType = ConfigManager.furniture[furnitureFieldId].profit_trigger
        coinData = {
            RoomId = roomId,
            FurnitureFieldId = furnitureFieldId,
            DropIndex = dropIndex,
            PropType = self:ParseDevicePropType(triggerType),
            DropCount = 0,
            InCome = 0
        }
        table.insert(self.CoinDatas, coinData)
        self:SaveLocalData()
    end
    return coinData
end

---@param coinData HotelCoinData
function HotelData:UpdateCoinData(coinData, num)
    coinData.InCome = coinData.InCome + num
    self:SaveLocalData()
end

---收集金币
function HotelData:CollectCoin(coinData)
    if table.ContainsValue(self.CoinDatas, coinData) then
        table.removebyvalue(self.CoinDatas, coinData)
        self:SaveLocalData()
    end
end
---获取房间的金币数据
function HotelData:GetRoomCoinDatas(roomId)
    local coinDatas = {}
    for i = 1, #self.CoinDatas do
        if self.CoinDatas[i].RoomId == roomId then
            table.insert(coinDatas, self.CoinDatas[i])
        end
    end
    return coinDatas
end

---@param triggerType DeviceData.eDevicePropType 金币掉落触发类型
function HotelData:ParseDevicePropType(triggerType)
    local propType = DeviceData.eDevicePropType.RoomIncome
    if triggerType == UseFurnitureState.eProfitTrigger.Order then
        propType = DeviceData.eDevicePropType.RoomIncome
    elseif triggerType == UseFurnitureState.eProfitTrigger.Use then
        propType = DeviceData.eDevicePropType.UseIncome
    elseif triggerType == UseFurnitureState.eProfitTrigger.Extra then
        propType = DeviceData.eDevicePropType.ExtIncome
    end
    return propType
end

--region 本地数据读取

---所有房间掉落的金币数据(挂机，使用，额外等)
---@class HotelCoinData
---@field public RoomId number 房间id
---@field public FurnitureFieldId number 家具类型id
---@field public DropIndex number 对应家具的掉落位置
---@field public PropType DeviceData.eDevicePropType 收益类型
---@field public DropCount number 掉落次数
---@field public InCome number 实际收益

---@class HotelLocalData
---@field public UnlockHotelList number[] 已经解锁的旅店
---@field public FinishTask number[] 已经完成的旅店任务
---@field public TipLevel number 小费等级
---@field public OfflineIncomLevel number 离线收益等级
---@field public HotelPublicityLevel number 旅店宣传等级
---@field public HotelTaskMap table<number,number> 旅店已完成的任务集合
---@field public HotelIncomTime number 上次旅店触发收益时间戳
---@field public HotelOfflineTime number 登录触发离线收益时间
---@field public HotelIncomTime2 number 上次在线30s触发收益时间
---@field public CoinDatas HotelCoinData[] 房间金币数据
---@field public FingerTaskIds number[]
function HotelData:SaveLocalData()
    ---@type HotelLocalData
    local data = {
        UnlockHotelList = self.UnlockHotelList,
        FinishTask = self.FinishTask,
        TipLevel = self.TipLevel,
        OfflineIncomLevel = self.OfflineIncomLevel,
        HotelPublicityLevel = self.HotelPublicityLevel,
        HotelTaskMap = self.HotelTaskMap,
        HotelIncomTime = self.HotelIncomTime,
        HotelOffineCoin = self.HotelOffineCoin,
        HotelOfflineTime = self.HotelOfflineTime,
        HotelIncomTime2 = self.HotelIncomTime2,
        CoinDatas = self.CoinDatas,
        FingerTaskIds = self.FingerTaskIds
    }
    PlayerPrefsUtil.SetTable("HotelLocalData_key", data)

end

function HotelData:InitLocalData()
    --- 旅店数据
    ---@type HotelLocalData
    local data = PlayerPrefsUtil.GetTable("HotelLocalData_key")
    if not IsNil(data) then
        self.UnlockHotelList = data.UnlockHotelList
        self.FinishTask = data.FinishTask

        self.TipLevel = data.TipLevel
        self.OfflineIncomLevel = data.OfflineIncomLevel
        self.HotelPublicityLevel = data.HotelPublicityLevel
        self.HotelTaskMap = data.HotelTaskMap
        self.HotelIncomTime = data.HotelIncomTime
        self.HotelOffineCoin = data.HotelOffineCoin
        self.HotelOfflineTime = data.HotelOfflineTime
        self.HotelIncomTime2 = data.HotelIncomTime2
        self.CoinDatas = data.CoinDatas
        self.FingerTaskIds = data.FingerTaskIds
    else
        ---默认解锁休息室
        self.UnlockHotelList = { 1001 }
        self.FinishTask = {}

        --默认1级
        self.TipLevel = 1
        self.OfflineIncomLevel = 1
        self.HotelPublicityLevel = 1
        self.HotelTaskMap = {}
        self.HotelIncomTime = TimeUtil.GetSecTime()
        self.HotelOffineCoin = 0
        self.HotelOfflineTime = 0
        self.HotelIncomTime2 = TimeUtil.GetSecTime()
        self.CoinDatas = {}
        self.FingerTaskIds = {}
    end

end
--endregion

--region 数据结构
--旅店属性名称
---@class HotelData.attributeName
HotelData.attributeName = {
    tipName = "Function_Build_tip_name", --小费上限
    offlineName = "Function_Build_afktime_name", --离线收益
    hotelPublicity = "Function_Build_autoserve_name", --旅店宣传
}
--旅店属性图片
---@class HotelData.attributeImg
HotelData.attributeImg = {
    tipImg = "icon_tipmax", --小费上限
    offlineImg = "icon_idle", --离线收益
    hotelPublicityImg = "icon_renqi", --旅店宣传
}

--旅店属性类型
---@class HotelData.attributeType
HotelData.attributeType = {
    tip = 1, --小费上限
    offlineIncom = 2, --离线收益
    hotelPublicity = 3, --旅店宣传
}
--旅店属性描述
---@class HotelData.attributeMessage
HotelData.attributeMessage = {
    tipMessage = "Function_Build_tip_desc", --小费上限
    offlineMessage = "Function_Build_afktime_desc", --离线收益
    hotelPublicityMessage = "Function_Build_autoserve_desc", --旅店宣传
}

--旅店属性内容文字
---@class HotelData.attributeContent
HotelData.attributeContent = {
    tipMContent = "Function_Build_tip_name", --小费上限
    offlineContent = "Function_Build_afktime_param", --离线收益
    hotelPublicityContent = "Function_Build_autoserve_param", --旅店宣传
}

--旅店属性内容文字对应图片
---@class HotelData.attributeContentImg
HotelData.attributeContentImg = {
    tipMContentImg = "bulid_tips", --小费上限
    offlineContentImg = "bulid_afktime", --离线收益
    hotelPublicityContentImg = "bulid_autoserve", --旅店宣传
}
--endregion

--region 获取属性相关数据
--根据属性类型获取属性类型名称
---@param type number 属性类型
function HotelData:GetAttributeName(type)
    if (type == HotelData.attributeType.tip) then
        return HotelData.attributeName.tipName
    elseif type == HotelData.attributeType.offlineIncom then
        return HotelData.attributeName.offlineName
    elseif type == HotelData.attributeType.hotelPublicity then
        return HotelData.attributeName.hotelPublicity
    end
end

--根据属性类型获取属性类型等级
---@param type number 属性类型
function HotelData:GetAttributeLevel(type)
    if (type == HotelData.attributeType.tip) then
        return self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        return self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        return self.HotelPublicityLevel
    end
end

--根据属性类型获取属性类型描述
---@param type number 属性类型
function HotelData:GetAttributeMessage(type)
    if (type == HotelData.attributeType.tip) then
        return HotelData.attributeMessage.tipMessage
    elseif type == HotelData.attributeType.offlineIncom then
        return HotelData.attributeMessage.offlineMessage
    elseif type == HotelData.attributeType.hotelPublicity then
        return HotelData.attributeMessage.hotelPublicityMessage
    end
end
--根据类型获取属性类型图片
---@param type number 属性类型
function HotelData:GetAttributeImg(type)
    if (type == HotelData.attributeType.tip) then
        return HotelData.attributeImg.tipImg
    elseif type == HotelData.attributeType.offlineIncom then
        return HotelData.attributeImg.offlineImg
    elseif type == HotelData.attributeType.hotelPublicity then
        return HotelData.attributeImg.hotelPublicityImg
    end
end

--根据类型获取属性内容文字
---@param type number 属性类型
function HotelData:GetAttributeContent(type)
    if (type == HotelData.attributeType.tip) then
        return HotelData.attributeContent.tipMContent
    elseif type == HotelData.attributeType.offlineIncom then
        return HotelData.attributeContent.offlineContent
    elseif type == HotelData.attributeType.hotelPublicity then
        return HotelData.attributeContent.hotelPublicityContent
    end
end

--根据类型获取属性内容文字对应图片
---@param type number 属性类型
function HotelData:GetAttributeContentImg(type)
    if (type == HotelData.attributeType.tip) then
        return HotelData.attributeContentImg.tipMContentImg
    elseif type == HotelData.attributeType.offlineIncom then
        return HotelData.attributeContentImg.offlineContentImg
    elseif type == HotelData.attributeType.hotelPublicity then
        return HotelData.attributeContentImg.hotelPublicityContentImg
    end
end

--根据属性类型获取当前等级的属性文字描述 和下一级描述
---@param type number 属性类型
function HotelData:GetAttributeStr_myLevel(type)
    local level = 1
    if (type == HotelData.attributeType.tip) then
        level = self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        level = self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        level = self.HotelPublicityLevel
    end

    ---@type hotleconfig_Item[]
    local hotelData = ConfigManager.GetConfigByField(ConfigManager.hotleconfig, "type", { type })
    ---@type hotleconfig_Item
    local targetData
    for i, v in pairs(hotelData) do
        if (v.level == level) then
            targetData = v
            break
        end
    end
    if (targetData == nil) then
        return "暂无数据"
    end

    local bacicStr = LanguageUtil:GetValue(self:GetAttributeContent(type))

    local nowStr
    local nextStr
    if (type == HotelData.attributeType.tip) then
        nowStr = bacicStr .. targetData.param[1]
        if (targetData.next_param[1] ~= nil and targetData.next_param[1] > 0) then
            nextStr = targetData.next_param[1]
        end

    elseif type == HotelData.attributeType.offlineIncom then
        --秒转换为小时
        local hour = string.format("%.1f", targetData.param[1] / TimeUtil.SECOND_OF_HOUR)
        nowStr = bacicStr .. hour .. "h"
        if (targetData.next_param[1] ~= nil and targetData.next_param[1] > 0) then
            nextStr = string.format("%.1f", targetData.next_param[1] / TimeUtil.SECOND_OF_HOUR) .. "h"
        end

    elseif type == HotelData.attributeType.hotelPublicity then
        nowStr = bacicStr .. targetData.param[1] .. "~" .. targetData.param[2]
        if (table.count(targetData.next_param) > 0) then
            nextStr = targetData.next_param[1] .. "~" .. targetData.next_param[2]
        end
    end
    return { nowStr, nextStr }
end

--获取当前我的属性值
function HotelData:GetMyAttribute(type)
    local level = 1
    if (type == HotelData.attributeType.tip) then
        level = self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        level = self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        level = self.HotelPublicityLevel
    end

    ---@type hotleconfig_Item[]
    local hotelData = ConfigManager.GetConfigByField(ConfigManager.hotleconfig, "type", { type })
    ---@type hotleconfig_Item
    local targetData
    for i, v in pairs(hotelData) do
        if (v.level == level) then
            targetData = v
            break
        end
    end
    if (targetData == nil) then
        return "暂无数据"
    end
    return targetData.param[1]
end

--获取下一级我的属性值
function HotelData:GetMyAttribute_next(type)
    local level = 1
    if (type == HotelData.attributeType.tip) then
        level = self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        level = self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        level = self.HotelPublicityLevel
    end

    ---@type hotleconfig_Item[]
    local hotelData = ConfigManager.GetConfigByField(ConfigManager.hotleconfig, "type", { type })
    ---@type hotleconfig_Item
    local targetData
    for i, v in pairs(hotelData) do
        if (v.level == level) then
            targetData = v
            break
        end
    end
    if (targetData == nil) then
        return "暂无数据"
    end
    return targetData.next_param
end

--当前属性是否是最大等级
---@param type number 属性类型
function HotelData:AttributeIsMaxLevel(type)
    local level = 1
    if (type == HotelData.attributeType.tip) then
        level = self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        level = self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        level = self.HotelPublicityLevel
    end

    ---@type hotleconfig_Item[]
    local hotelData = ConfigManager.GetConfigByField(ConfigManager.hotleconfig, "type", { type })
    local maxLevel = table.count(hotelData)

    return level >= maxLevel
end

--当前属性升级需要的花费
---@param type number 属性类型
function HotelData:GetAttributeUpCost(type)
    local level = 1
    if (type == HotelData.attributeType.tip) then
        level = self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        level = self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        level = self.HotelPublicityLevel
    end

    ---@type hotleconfig_Item[]
    local hotelData = ConfigManager.GetConfigByField(ConfigManager.hotleconfig, "type", { type })
    ---@type hotleconfig_Item
    local targetData
    for i, v in pairs(hotelData) do
        if (v.level == level) then
            targetData = v
            break
        end
    end
    if (targetData == nil or targetData.next_id <= 0 or self:AttributeIsMaxLevel(type)) then
        return "Max"
    end

    local nextId = targetData.next_id

    local nextData = Config.hotleconfig[nextId]

    local costData = nextData.cost

    local costNum = costData[2]
    return costNum
end
--endregion

--region 触发数据
--属性升级
---@param type number 属性类型
function HotelData:UpgradeAttribute(type)
    local level = 1
    if (type == HotelData.attributeType.tip) then
        level = self.TipLevel
    elseif type == HotelData.attributeType.offlineIncom then
        level = self.OfflineIncomLevel
    elseif type == HotelData.attributeType.hotelPublicity then
        level = self.HotelPublicityLevel
    end

    ---@type hotleconfig_Item[]
    local hotelData = ConfigManager.GetConfigByField(ConfigManager.hotleconfig, "type", { type })
    ---@type hotleconfig_Item
    local targetData
    for i, v in pairs(hotelData) do
        if (v.level == level) then
            targetData = v
            break
        end
    end
    if (targetData == nil or targetData.next_id <= 0 or self:AttributeIsMaxLevel(type)) then
        print("升级失败")
        return
    end

    local nextId = targetData.next_id
    local nextData = Config.hotleconfig[nextId]
    local level = nextData.level
    if (type == HotelData.attributeType.tip) then
        self.TipLevel = level
    elseif type == HotelData.attributeType.offlineIncom then
        self.OfflineIncomLevel = level
    elseif type == HotelData.attributeType.hotelPublicity then
        self.HotelPublicityLevel = level
    end

    self:SaveLocalData()

    local cost = nextData.cost
    local costType = cost[1]
    local costNum = cost[2]
    GameData:GetInstance():ChangePlayerProp(costType, -costNum)
    self:SendUpgradeAttributeEvent(type)
end

--完成旅店任务
---@param taskId number 任务id
function HotelData:TaskFinsh(taskId)

    if (self.HotelTaskMap[taskId] ~= nil) then
        print("任务已完成，无法继续完成")
        return
    end
    self.HotelTaskMap[taskId] = taskId
    self:SaveLocalData()

    self:SendFinshHotelTaskEvent(taskId)

    GameData:GetInstance():RefreshPopular()


end
--endregion

--region 发送事件
function HotelData:SendUpgradeAttributeEvent(type)
    --属性升级
    EventManager:GetInstance():Broadcast(GameEvent.UpgradeAttributeEvent, type)
end
function HotelData:SendFinshHotelTaskEvent(taskId)
    --完成旅店任务
    EventManager:GetInstance():Broadcast(GameEvent.FinshHotelTaskEvent, taskId)
end
function HotelData:SendCoinMoveEvent(num)
    --发送挂机收益金币漂浮事件
    EventManager:GetInstance():Broadcast(GameEvent.GoinMoveEvent, num)
end
--endregion

--region 其他
--当前房间是否解锁
---@param houseId number
function HotelData:HouseIsUnlock(houseId)
    return table.ContainsValue(self.UnlockHotelList, houseId)
end

--指定任务是否完成
function HotelData:TaskIsFinsh(taskId)
    return self.HotelTaskMap[taskId] ~= nil
end
--endregion

return HotelData