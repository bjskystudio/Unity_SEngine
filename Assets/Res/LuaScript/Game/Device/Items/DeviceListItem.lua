---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asd.
--- DateTime: 2022/10/9 19:02
---
local ListItemBase = require("ListItemBase")
local ConfigManager = require("ConfigManager")
local UIComBase = require("UIComBase")
local GameEvent = require("GameEvent")
local Log = require("Log")
local GameDefine = require("GameDefine")
local EventInst = require("EventManager"):GetInstance()
local DeviceData = require("DeviceData")
local DeviceDataInst = require("DeviceData"):GetInstance()
local GameDataInst = require("GameData"):GetInstance()
local UIInst = require("UIManager"):GetInstance()
local SceneManager = require("SceneManager")
local UIManager = require("UIManager")
local UIDefine = require("UIDefine")
local HotelDataInt = require("HotelData"):GetInstance()

---@class DeviceListItem : UIComBase 组件
---@field private go_table DeviceListItem_GoTable GoTable
---@field private ParentCls UIComBase 父窗口类
local DeviceListItem = Class("DeviceListItem", ListItemBase)

---添加Events监听事件
function DeviceListItem:Awake()
    self.IsInit = false
    self:AddEvent(GameEvent.UpGradeFurnitureEvent)
    self:AddEvent(GameEvent.UpGradeFieldEvent)
    self:AddEvent(GameEvent.ChangeFurnitureEvent)
    self:AddEvent(GameEvent.FurnitureOnTheWayOverEvent)
    self:AddEvent(GameEvent.CoinChangeFinsh)
end
--- 窗口显示[protected]
---@param ... any @窗口传参
function DeviceListItem:OnCreate()

end

---@public
---@param DataItem furniture_Item
function DeviceListItem:OnRefreshItemData(DataItem, index, ...)
    if index ~= nil then
        -- Log.Debug("DeviceListItem init:"..DataItem.id..",i:"..index)
    end
    local myTerm = GameDataInst.Popular--我的人气
    self.houseId = DataItem.house_type--房间id
    self.fieldId = DataItem.id--栏位id

    local isUnLock = DeviceDataInst:FieldIsUnlock(self.houseId, self.fieldId)--当前栏位是否解锁
    self.isUnLock = isUnLock
    self.DataItem = DataItem

    local unlockData = DataItem.unlock_terms--解锁条件

    local costData = DataItem.cost --解锁消耗
    self.costData = DataItem.cost

    local condition = ""
    local status = 0--0未达到条件 1达到条件未解锁 2已解锁
    self.go_table.obj_finger:SetActive(false)

    status = DeviceData.fieldStats.unlock;
    if (isUnLock) then
        self.go_table.obj_finger:SetActive(false)
    else

        if (DeviceData:GetInstance().FurniturePointId ~= nil) then
            if (DeviceData:GetInstance().FurniturePointId == self.fieldId) then

                self.go_table.obj_finger:SetActive(true)
                local seq = CS.DG.Tweening.DOTween.Sequence()
                seq:Append(self.go_table.obj_finger.transform:DOLocalMove(Vector3.New(self.go_table.obj_finger.transform.localPosition.x, self.go_table.obj_finger.transform.localPosition.y + 5, 0), 1))
                seq:Append(self.go_table.obj_finger.transform:DOLocalMove(Vector3.New(self.go_table.obj_finger.transform.localPosition.x, self.go_table.obj_finger.transform.localPosition.y, 0), 1))
                seq:SetLoops(-1)
            end
        end

        local linkStr
        local uData = DataItem.term_num
        for i, num in pairs(unlockData) do
            local term = uData[i]
            if num == 8 then
                --人气条件
                if (myTerm < term) then
                    local termId = GameDataInst:GetPlayerPropItemId(GameDefine.ePlayerProp.Popularity)
                    local linkId = self.fieldId
                    linkStr = string.format("<link=\"%s\">", tostring(linkId) .. "#" .. tostring(termId))
                    condition = linkStr .. LanguageUtil:GetValue("Common_furnitureparam_term") .. term .. "</link>"
                    status = DeviceData.fieldStats.lock
                    self.lackTerm = term - myTerm
                else
                    status = DeviceData.fieldStats.NotBought
                end

            elseif num == 9 then
                --房间条件
                -- local isUnLock = DeviceDataInst:IsHouseUnLock(self.houseId)
                local isUnLock = HotelDataInt:TaskIsFinsh(term)
                if (isUnLock) then
                    status = DeviceData.fieldStats.NotBought
                else
                    -- local houseData = ConfigManager.room_config[term]
                    local linkId = self.fieldId
                    local termId = term
                    local buildTaskName = Config.hotlebuild[termId].text
                    linkStr = string.format("<link=\"%s\">", tostring(linkId) .. "#" .. tostring(termId))
                    condition = linkStr .. LanguageUtil:GetValue("Common_field_unlock") .. LanguageUtil:GetValue(buildTaskName) .. "</link>"
                    status = DeviceData.fieldStats.lock
                end

            elseif num == 10 then
                --栏位条件
                local fieldIsUnLock = DeviceDataInst:FieldIsUnlock(self.houseId, term)
                if (fieldIsUnLock) then
                    status = DeviceData.fieldStats.NotBought
                else
                    local roomData = ConfigManager.furniture[term]

                    local linkId = self.fieldId
                    linkStr = string.format("<link=\"%s\">", tostring(linkId) .. "#" .. tostring(term))
                    condition = linkStr .. LanguageUtil:GetValue("Common_field_unlock") .. LanguageUtil:GetValue(roomData.name) .. "</link>"
                    status = DeviceData.fieldStats.lock
                end
            end
        end
    end

    self.go_table.stmp_deviceTitle.text = LanguageUtil:GetValue(DataItem.name)
    self.ItemListView = self.go_table.list_DeviceUnlockList

    self.go_table.sbtn_finishImme.gameObject:SetActive(false)
    self.go_table.obj_contion:SetActive(false)

    self.ItemListView.gameObject:SetActive(false)
    self.status = status
    if status == DeviceData.fieldStats.lock then
        self:initTextPro(condition)
    elseif status == DeviceData.fieldStats.NotBought then
        self:initBtn(costData)
    else
        self.ItemListView.gameObject:SetActive(true)
        self:initView()
    end
end

function DeviceListItem:initTextPro(condition)
    self.go_table.obj_contion:SetActive(true)
    self.go_table.stmp_conditionText.text = condition
end

function DeviceListItem:initBtn(costData)
    local costType = costData[1]
    local costNum = costData[2]

    self.go_table.sbtn_finishImme.gameObject:SetActive(true)

    local myDiamond = GameDataInst.Gold
    if (myDiamond >= costNum) then
        self.go_table.stmp_costNum.text = costNum
    else
        self.go_table.stmp_costNum.text = "<color=#f66d93>" .. costNum .. "</color>"
    end
    self.go_table.img_IconImageFast:LoadSprite(GameDefine.eResPath.AtlasMain .. GameDataInst:GetCostImageName(costType), false, 1)

    self.go_table.stmp_unlock.text = LanguageUtil:GetValue("Common_unlock")
end

--初始化列表
function DeviceListItem:initView()
    ---@type furniture_level_Item[]
    self.ItemDataList = ConfigManager.GetConfigByField(ConfigManager.furniture_level, "furniture_id", { self.fieldId }, function(l, r)
        return l.level < r.level
    end)

    local listViewGetItem = function(_, _, index)
        index = index + 1
        if index < 0 or index > #self.ItemDataList then
            return nil
        end
        local listViewItem = self.ItemListView:NewListViewItem("DeviceUnlockItem")

        ---@type DeviceUnlockItem
        local itemCom = self:GetOrAddComponent(listViewItem.gameObject, require("DeviceUnlockItem"))
        --自定义初始化方法
        itemCom:InitUnlockItemData(self.ItemDataList[index], index)

        return listViewItem
    end
    if not self.IsInit then
        self.IsInit = true
        self.ItemListView:InitListView(#self.ItemDataList, handler(self, listViewGetItem))

        --定位逻辑
        local targetIndex = 0
        for i, v in pairs(self.ItemDataList) do

            local usingId = DeviceDataInst:GetCurUseFurnitureData(self.houseId, self.fieldId)
            if (usingId == nil) then
                break
            end
            if (usingId == v.id) then
                targetIndex = i
                break ;
            end

        end

        self.ItemListView:MovePanelToItemIndex(targetIndex, 450)
    else
        self.ItemListView:RefreshAllShownItem()

    end
    LoopListViewHelper.SetParentListDragEnable(self.ItemListView, self.OwnerUI.DeviceList)
end

function DeviceListItem:OnUpGradeBuild(furnitureId, type)
    if (self.houseId == nil) then
        return
    end

    if (self.ItemDataList == nil) then
        return
    end

    ---@type furniture_Item
    local targetHouse
    for i, v in ipairs(self.ItemDataList) do
        if (v.id == furnitureId) then
            targetHouse = v
        end
    end

    if (targetHouse == nil) then
        return
    end
    self:OnRefreshItemData(self.DataItem)

end

function DeviceListItem:OnUpGradeFiled(field)
    if (field == self.fieldId) then
        DeviceDataInst:SaveFieldData(self.houseId, self.fieldId)
        -- DeviceDataInst:AddFurnitureFinsh(houseId, field, id)
        ---@type furniture_Item
        local fieldData = ConfigManager.furniture[field]

        local targetCondition = fieldData.cost
        local type = targetCondition[1]
        local costNum = targetCondition[2]
        GameDataInst:ChangePlayerProp(type, -costNum)

        ---@type furniture_level_Item[]
        local fData = ConfigManager.GetConfigByField(Config.furniture_level, "furniture_id", { field })
        for i, v in pairs(fData) do
            if (v.unlock == 1) then
                -- DeviceDataInst:AddFurnitureFinsh(self.houseId, field, v.id)
                --DeviceDataInst:DeleteFurnitureOnTheWay(self.houseId, field, v.id)
                ---@type DeviceFieldData
                local fieldData = DeviceDataInst.HouseData[self.houseId][field]

                -- if (self:FurnitureIsOnTheWay(furnitureId)) then

                local furnitureId = v.id
                ---@type DeviceFieldData[]
                local data = DeviceDataInst.HouseData[self.houseId]
                data[field].UnlockFurnitureIds[furnitureId] = furnitureId
                data[field].CurUseFurnitureId = v.id
                DeviceDataInst.HouseData[self.houseId] = data
                DeviceDataInst.HouseData[self.houseId][field].OnThewayFiledIds[furnitureId] = nil

                --直接朝向场景中家具位置
                --[[                EventInst:Broadcast(GameEvent.RoomFurnitureLookAt, furnitureId)
                                EventInst:Broadcast(GameEvent.UnlockFurnitureImmediately, furnitureId)]]

                --直接朝向场景中家具位置
                EventInst:Broadcast(GameEvent.RoomFurnitureLookAt, furnitureId, function()
                    --if (type ~= DeviceData.UnlockType.Normal) then
                    --立即完成事件
                    EventInst:Broadcast(GameEvent.UnlockFurnitureImmediately, furnitureId)
                    --end
                end)

                self.OwnerUI:Close()
                return
                -- break
            end
        end


    end
    self:OnRefreshItemData(self.DataItem)

end

function DeviceListItem:OnChangeFurnitureEvent(arg)
    local arg_field = DeviceDataInst:GetFieldId(arg)
    if (arg_field == self.fieldId) then
        --[[        DeviceDataInst:SaveUsingFurniture(self.houseId, self.fieldId, arg)
                GameDataInst:RefreshPopular()]]
        self:OnRefreshItemData(self.DataItem)
        --点击运输完成
        EventInst:Broadcast(GameEvent.RoomFurnitureLookAt, arg)
        self.OwnerUI:Close()
    end
end

---事件处理
---@private
---@param id EventID 事件ID
function DeviceListItem:EventHandle(id, ...)

    if (id == GameEvent.UpGradeFurnitureEvent) then

        local tab = { ... }
        local type = tab[2]
        local fid = tab[1]
        if (type == DeviceData.UnlockType.Quick) then
            --钻石解锁直接完成
            self:OnUpGradeBuild(fid, type)
        end
    elseif id == GameEvent.UpGradeFieldEvent then
        self:OnUpGradeFiled(...)
    elseif id == GameEvent.ChangeFurnitureEvent then
        self:OnChangeFurnitureEvent(...)

    elseif id == GameEvent.FurnitureOnTheWayOverEvent then
        --金币解锁家具倒计时结束且点击完成
        local tab = { ... }
        local fid = tab[1]
        self:OnUpGradeBuild(fid, DeviceData.UnlockType.Normal)

    elseif id == GameEvent.FurnitureUnlockByTimeEvent then
        --直接用时间解锁家具
        --[[        if (id == self.DataItem.id) then
                    self:OnRefreshItemData(self.DataItem)
                end]]

    elseif id == GameEvent.CoinChangeFinsh then
        if self.status == DeviceData.fieldStats.NotBought then
            self:initBtn(self.costData)
        end

    end
end

---可用
---@protected
function DeviceListItem:OnEnable()
end

---不可用
---@protected
function DeviceListItem:OnDisable()
end

---点击Button回调
---@param btn UnityEngine.UI.Button 按钮
function DeviceListItem:OnClickBtn(btn)
    if (btn == self.go_table.sbtn_finishImme) then
        --解锁栏位

        --金币
        local needGold = self.DataItem.cost[2]--消耗数量
        local needType = self.DataItem.cost[1]--消耗类型
        if (GameDataInst.Gold < needGold) then
            local lackId = GameDataInst:GetPlayerPropItemId(GameDefine.ePlayerProp.Gold)
            UIInst:OpenUIDefine(UIDefine.DeviceLackView, nil, lackId, needGold - GameDataInst.Gold)
            return
        end

        DeviceDataInst:UpGradeField(self.fieldId)
        --self:OnRefreshItemData(self.DataItem)
    end
end

---点击Toggle回调
---@protected
---@param toggle UnityEngine.UI.Toggle Toggle
---@param isOn boolean 是否选中
function DeviceListItem:OnClickToggle(toggle, isOn)
end

function DeviceListItem:OnClickTmp(tmp, linkId)
    local linkData = string.splitArr(linkId, 0)
    local field = linkData[1]
    local targetId = linkData[2]

    if (math.floor(tonumber(targetId) / 10000) == 100) then
        --人气
        local lackId = GameDataInst:GetPlayerPropItemId(GameDefine.ePlayerProp.Popularity)
        UIInst:OpenUIDefine(UIDefine.DeviceLackView, nil, lackId, self.lackTerm)

    elseif (math.floor(tonumber(targetId) / 10000) == 1) then
        --某个栏位条件
        EventInst:Broadcast(GameEvent.ClickLockFieldEvent, tonumber(targetId))

    elseif (math.floor(tonumber(targetId) / 1000) == 1) then
        --跳转到旅店任务
        local taskId = tonumber(targetId)
        --[[        HotelDataInt.FinishTask = {}
                table.insert(HotelDataInt.FinishTask, taskId)]]

        --指定跳转任务ID
        HotelDataInt.JumpTaskId = tonumber(targetId)
        SceneManager:GetInstance():ChangeToHotel()
        UIManager:GetInstance():OpenUIDefine(UIDefine.HotelView)

        self.OwnerUI:Close()


    end


end

---数据清理
---@protected
function DeviceListItem:OnDestroy()
    --DeviceListItem.ParentCls.OnDestroy(self)
    self.IsInit = false
    --[[    if (self.isUnLock) then
        else
            DeviceData:GetInstance().JumpFieldId = nil
        end]]


end

return DeviceListItem