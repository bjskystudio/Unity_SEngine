---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asd.
--- DateTime: 2022/10/20 18:02
---

local UIBase = require("UIBase")
local Log = require("Log")
local Vector2 = Vector2
local MapManager = require("MapManager")
local SceneManager = require("SceneManager")
local EventManager = require("EventManager")
local GameEvent = require("GameEvent")

---@class SceneViewBase : UIBase 场景的基类，拖动缩放等
---@field private go_table SceneView_GoTable GoTable
---@field private ParentCls UIComBase 父窗口类
---@field CameraMoving boolean 镜头正在移动
---@field CurrentPos Vector2 当前位置
---@field CurrentScale number 当前缩放
local SceneViewBase = Class("SceneViewBase", UIBase)

function SceneViewBase:OnBaseAwake()
    self.transform.anchorMin = Vector2.New(0.5,0.5)
    self.transform.anchorMax = Vector2.New(0.5,0.5)
    self.transform:ResetPRS()

    self.SceneSize = Vector2.New(1024,1024)
    --self.ScreenSize = Vector2.New(CS.UnityEngine.Screen.width,CS.UnityEngine.Screen.height)--Vector2.New(720,1280)
    self.ScreenSize = Vector2.New(CSUIModel.UICanvas.rect.size.x,CSUIModel.UICanvas.rect.size.y)
    -- 场景默认scale
    self.MinScale = self.ScreenSize.y / self.SceneSize.y
    self.MaxScale = 2 * self.MinScale
    --创建拖动代理
    self:CreateDragHandler()

    self.Root = self.go_table.obj_Root
    self:SetCurrentScale(self.MinScale)
    self:SetCurrentPos(0,0)

    self.CameraMoving = false

    self:Awake()
end
---设置当前缩放
function SceneViewBase:SetCurrentScale(scale)
    self.CurrentScale = scale
    self.Root:SetLocalScaleXYZ(self.CurrentScale)
    EventManager:GetInstance():Broadcast(GameEvent.TileMapScale, scale)
    
end
---设置当前位置
function SceneViewBase:SetCurrentPos(x,y)
    self.CurrentPos = self:CheckMoveArea(Vector2.New(x,y))
    self.Root.transform.localPosition = self.CurrentPos
    EventManager:GetInstance():Broadcast(GameEvent.TileMapPosition, self.CurrentPos)
end

---@param pos Vector2
function SceneViewBase:CheckMoveArea(pos)
    local x = pos.x
    local y = pos.y
    local minX = -(self.SceneSize.x *self.CurrentScale -self.ScreenSize.x)/2
    local maxX = (self.SceneSize.x *self.CurrentScale -self.ScreenSize.x)/2
    local minY = -(self.SceneSize.y *self.CurrentScale -self.ScreenSize.y)/2
    local maxY = (self.SceneSize.y *self.CurrentScale -self.ScreenSize.y)/2

    x = x < minX and minX or x
    x = x > maxX and maxX or x
    y = y < minY and minY or y
    y = y > maxY and maxY or y
    return Vector2.New(x,y)
end

---重设场景大小
---@param size Vector2 场景大小
---@param scaleVec Vector3 场景缩放
---@param posOffset Vector2 位置偏移
function SceneViewBase:ResetSceneSize(size,scaleVec,posOffset)
    scaleVec = scaleVec or Vector2.New(1,2,1.5)
    posOffset = posOffset or Vector2.zero
    self.SceneSize = size
    -- 场景scale
    local scale = self.ScreenSize.y / self.SceneSize.y
    self.MinScale = scaleVec.x * scale
    self.MaxScale = scaleVec.y * scale
    --self:SetCurrentScale(self.MaxScale)
    self:SetCurrentScale(scaleVec.z * scale)
    self:SetCurrentPos(posOffset.x,posOffset.y)
end

function SceneViewBase:CreateDragHandler()
    if self.go_table then
        self.go_table["_onBeginDrag"] = handler(self,self.OnBeginDrag)
        self.go_table["_onDrag"] = handler(self,self.OnDrag)
        self.go_table["_onEndDrag"] = handler(self,self.OnEndDrag)
        self.go_table["_onZoom"] = handler(self,self.OnZoom)
    end
end

function SceneViewBase:OnZoom(_,zoomDelta)
    --Log.Info("lua zoomDelta:"..zoomDelta
    --Log.Info("lua zoom:"..zoomDelta)
    local scale = self.CurrentScale - zoomDelta/200
    if scale > self.MaxScale then
        scale = self.MaxScale
    elseif scale < self.MinScale then
        scale = self.MinScale
    end
    self:SetCurrentScale(scale)
    --Log.Info("lua scene scale:"..self.CurrentScale)
    self:SetCurrentPos(self.CurrentPos.x,self.CurrentPos.y)
end

---拖动开始
---@override
---@param eventData UnityEngine.EventSystems.PointerEventData
function SceneViewBase:OnBeginDrag(_,eventData)
    if self.CameraMoving then
        return
    end
    --Log.Debug("drag start:"..eventData.position.x..","..eventData.position.y)
    self.DragStartPos = Vector2.New(eventData.position.x,eventData.position.y)
end

---拖动
---@override
---@param eventData UnityEngine.EventSystems.PointerEventData
function SceneViewBase:OnDrag(_,eventData)
    if self.CameraMoving or self.DragStartPos == nil then
        return
    end
    --Log.Debug("dragging:"..eventData.position.x..","..eventData.position.y)
    self.DragPos = Vector2.New(eventData.position.x,eventData.position.y)
    local distance = Vector2.Distance(self.DragPos,self.DragStartPos)
    if distance > 5 then
        self.DragPosClone = self.DragPos:Clone()
        local curPos = self.CurrentPos:Add(self.DragPos:Sub(self.DragStartPos))
        self:SetCurrentPos(curPos.x,curPos.y)
        self.DragStartPos = self.DragPosClone
    end
end
---拖动结束
---@override
---@param eventData UnityEngine.EventSystems.PointerEventData
function SceneViewBase:OnEndDrag(_,eventData)
    if self.CameraMoving then
        return
    end
    --Log.Debug("drag end:"..eventData.position.x..","..eventData.position.y)
    self.DragStartPos = nil
end

---移动相机到位置
---@param pos UnityEngine.Vector3
---@param during number 时间
function SceneViewBase:CameraMoveTo(pos,during,complete)
    self.CameraMoving = true
    local movePos = self:CheckMoveArea(Vector2.New(-pos.x * self.CurrentScale,-pos.y * self.CurrentScale))
    self.Root.transform:DOLocalMove(movePos,during):OnComplete(function()
        self.CameraMoving = false
        self:SetCurrentPos(movePos.x,movePos.y)
        self.DragStartPos = movePos
        if complete ~= nil then
            complete()
        end
    end)
end

return SceneViewBase