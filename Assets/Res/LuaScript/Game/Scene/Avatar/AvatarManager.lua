---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Simon.L.
--- DateTime: 2022/11/17 14:17
---
local GameEvent = require("GameEvent")
local PlayerPrefsUtil = require("PlayerPrefsUtil")
local Config = Config
local ConfigManager = require("ConfigManager")
local TimerManager = require("TimerManager")
local SceneManager = require("SceneManager")
local EventManager = require("EventManager")
local AvatarEvent = require("AvatarEvent")
local AvatarStateMachine = require("AvatarStateMachine")
local MapManager = require("MapManager")
local DeviceData = require("DeviceData")

---@class AvatarInfo 精灵信息
---@field Id number 精灵id
---@field CustomId number 精灵类型
---@field RoomId number 房间，0是室外
---@field StateName string 当前状态
---@field SkinName string 皮肤
---@field AnimName string 动作
---@field TileX number 当前位置x
---@field TileY number 当前位置y
---@field GotoPos number 去的位置
---@field QueueIndex number 排队编号
---@field UseFurnitureId number 在使用家具 ,0为没使用
---@field UseTime number 已使用时间
---@field CanUseFurnitureIds number[] 需要使用的家具
---@field UsedFurnitureIds number[] 使用过的家具
---@field FinishRoomIds number[] 进过的房间
---@field RandomY number y轴随机偏移
---@field IsAngry boolean 是否生气
---@field AngryStartTime number 开始生气表情时间
---@field BubbleId number 气泡id
---@field NeedFurnitureId number 需要的家具
---@field AngryBubbleId number 生气的文本

---@class AvatarManager : Singleton @精灵管理器
---@field Avatars AvatarInfo[] 旅店精灵
---@field Machines table<number,AvatarStateMachine> 状态机
local AvatarManager = Class("AvatarManager", Singleton)
AvatarManager.StartAvatarID = 100000000

---@private
function AvatarManager:__init()
    --初始化精灵
    self:InitLocalData()

    self.Machines = {}
    ---同步数据
    self.SaveTimer = TimerManager:GetInstance():GetTimerStart(1,self.SaveLocalData,self,false)
    ---启动刷新
    self.MachineTimer = TimerManager:GetInstance():GetTimerStartImme(1,self.OnMachineTimer,self,false,true)

    self:InitAvatarMachines()
end

---获取新的精灵id
function AvatarManager:GetNewAvatarID()
    if self.MaxAvatarID + 1 > AvatarManager.StartAvatarID *10 then
        self.MaxAvatarID = AvatarManager.StartAvatarID
    else
        self.MaxAvatarID = self.MaxAvatarID + 1
    end
    return self.MaxAvatarID
end

---@param bornInfo AvatarBornNodeInfo 出生点info
---@param eggInfo EggMachine.EggInfo 扭蛋机info
function AvatarManager:CreateAvatar(bornInfo,eggInfo)
    local avatarInfo = self:NewAvatarInfo(bornInfo,eggInfo)
    table.insert(self.Avatars,avatarInfo)
    --self:SaveLocalData()
    return self:CreateAvatarMachine(avatarInfo)
end

---创建新的精灵数据
---@param bornInfo AvatarBornNodeInfo 出生点info
---@param eggInfo EggMachine.EggInfo 扭蛋机info
---@return AvatarInfo
function AvatarManager:NewAvatarInfo(bornInfo,eggInfo)
    local tilePos = MapManager:GetInstance():GetTilePos(SceneManager.eRoomId.Hotel,bornInfo.BornNode.transform.localPosition)
    if AppSetting.TileMapEnable then
        --测试
        ---@type AvatarInfo
        local avatarInfo = {
            Id = self:GetNewAvatarID(),
            CustomId = 1,
            RoomId = SceneManager.eRoomId.Lounge,
            StateName = AvatarStateMachine.eStateName.LoungeMove,
            SkinName = "Guest_1",
            AnimName = "idle",
            TileX = -3,--tilePos.x,
            TileY = -14,--tilePos.y,
            GotoPos = MapManager.ePosition.Furniture,
            QueueIndex = 1,
            UseFurnitureId = 10009,
            UseTime = 0,
            CanUseFurnitureIds = {10009},--self:GetCanUseFurnitureIds(),
            UsedFurnitureIds = {},
            FinishRoomIds = {1001},
            RandomY = Mathf.Random(1,100)/1000,
            IsAngry = false,
            BubbleId = 0,
            NeedFurnitureId = 0,
            AngryBubbleId = 0
        }
        return avatarInfo
    else
        ---@type AvatarInfo
        local avatarInfo = {
            Id = self:GetNewAvatarID(),
            CustomId = 1,
            RoomId = SceneManager.eRoomId.Hotel,
            StateName = AvatarStateMachine.eStateName.HotelStand,
            SkinName = "Guest_1",
            AnimName = "idle",
            TileX = tilePos.x,
            TileY = tilePos.y,
            GotoPos = 0,
            QueueIndex = 0,
            UseFurnitureId = 0,
            UseTime = 0,
            CanUseFurnitureIds = self:GetCanUseFurnitureIds(),
            UsedFurnitureIds = {},
            FinishRoomIds = {},
            RandomY = Mathf.Random(1,100)/1000,
            IsAngry = false,
            BubbleId = 0,
            NeedFurnitureId = 0,
            AngryBubbleId = 0
        }
        return avatarInfo
    end
end

-----@param avatarInfo AvatarInfo 精灵数据
function AvatarManager:ClearAvatar(avatarInfo)
    if table.ContainsValue(self.Avatars,avatarInfo) then
        table.removebyvalue(self.Avatars,avatarInfo)
        self:SaveLocalData()
        --移除状态机
        self:RemoveAvatarMachine(avatarInfo.Id)
    end
end
---获取休息室家具随机使用id
function AvatarManager:GetCanUseFurnitureIds()
    local canUse = {}
    --local door = ConfigManager.GetConfigByField(ConfigManager.furniture,"furniture_used",{1})
    --local need = ConfigManager.GetConfigByField(ConfigManager.furniture,"furniture_used",{2})
    local normals = ConfigManager.GetConfigByField(ConfigManager.furniture,"furniture_used",{3})
    --table.insert(canUse,door[1].id)
    --table.insert(canUse,need[Mathf.Random(1,#need)].id)
    local normalCount = Mathf.Random(1,#normals)
    for i = 1, normalCount do
        local normal = normals[Mathf.Random(1,#normals)]
        table.removebyvalue(normals,normal)
        table.insert(canUse,normal.id)
    end
    return canUse
end

--region ------------- 状态机 ------------------
function AvatarManager:OnMachineTimer()
    ---更新状态机
    for i, v in pairs(self.Machines) do
        if v ~= nil then
            v:Update()
        end
    end
end

---初始化所有状态机
function AvatarManager:InitAvatarMachines()
    for i = 1, #self.Avatars do
        self:CreateAvatarMachine(self.Avatars[i])
    end
end
---创建角色状态机
---@param avatarInfo AvatarInfo
---@return AvatarStateMachine 角色状态机
function AvatarManager:CreateAvatarMachine(avatarInfo)
    if self.Machines[avatarInfo.Id] ~= nil then
        return
    end
    local machine = AvatarStateMachine.New(avatarInfo)
    ---默认状态
    machine:ChangeState(avatarInfo.StateName)
    self.Machines[avatarInfo.Id] = machine
    return machine
end

---移除一个角色状态机
---@param avatarId number 角色id
function AvatarManager:RemoveAvatarMachine(avatarId)
    if self.Machines[avatarId] ~= nil then
        self.Machines[avatarId]:Destroy()
        self.Machines[avatarId] = nil
    end
end

---获取房间的角色状态机
---@param roomId number 房间id
---@return AvatarStateMachine[]
function AvatarManager:GetRoomAvatarMachines(roomId)
    local machines = {}
    for i, v in pairs(self.Machines) do
        if v.Info.RoomId == roomId then
            table.insert(machines,v)
        end
    end
    return machines
end

---@param avatarId number 精灵id
---@return AvatarStateMachine
function AvatarManager:GetAvatarMachineById(avatarId)
    return self.Machines[avatarId]
end

---获取该状态的machine
---@param stateName string 状态名
---@return StateMachine[]
function AvatarManager:GetStateMachines(stateName)
    local ret ={}
    for i, v in pairs(self.Machines) do
        if v.CurrentState ~= nil and v.CurrentState.Name == stateName then
            table.insert(ret,v)
        end
    end
    return ret
end


---获取家具使用状态的machine
---@param stateName string 状态名
---@param furnitureTypeId number 家具类型
---@return AvatarStateMachine[]
function AvatarManager:GetFurnitureStateMachines(stateName,furnitureTypeId)
    local ret ={}
    for i, v in pairs(self.Machines) do
        if v.Info.UseFurnitureId ~= nil and v.Info.UseFurnitureId == furnitureTypeId
                and v.CurrentState ~= nil and v.CurrentState.Name == stateName then
            table.insert(ret,v)
        end
    end
    return ret
end

--endregion ------------- 状态机 ------------------


--region 本地数据读取
---@class AvatarLocalData
---@field Avatars AvatarInfo[] 旅店精灵
---@field MaxAvatarID number max精灵id

function AvatarManager:InitLocalData()
    --- 精灵数据
    ---@type AvatarLocalData
    local data = PlayerPrefsUtil.GetTable("AvatarLocalData")
    if not IsNil(data) then
        self.Avatars = data.Avatars
        self.MaxAvatarID = data.MaxAvatarID
    else
        ---默认数据
        self.Avatars = {}
        self.MaxAvatarID = AvatarManager.StartAvatarID
    end

end

function AvatarManager:SaveLocalData()
    ---@type AvatarLocalData
    local data = {
        Avatars = self.Avatars,
        MaxAvatarID = self.MaxAvatarID
    }
    PlayerPrefsUtil.SetTable("AvatarLocalData", data)
end
--endregion 本地数据读取
return AvatarManager