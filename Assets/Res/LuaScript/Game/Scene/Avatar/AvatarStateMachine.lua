---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asd.
--- DateTime: 2022/11/23 11:36
---
local StateMachine = require("StateMachine")
local HotelStandState = require("HotelStandState")
local HotelMoveState = require("HotelMoveState")
local LoungeWaitState = require("LoungeWaitState")
local WaitFurnitureState = require("WaitFurnitureState")
local UseFurnitureState = require("UseFurnitureState")
local LoungeMoveState = require("LoungeMoveState")
local LoungeStandState = require("LoungeStandState")
local NeedFurnitureState = require("NeedFurnitureState")
local AvatarManager = require("AvatarManager")
local EventManager = require("EventManager")
local AvatarEvent = require("AvatarEvent")
local AvatarView = require("AvatarView")
local MapManager = require("MapManager")
local SceneManager = require("SceneManager")
local DeviceData = require("DeviceData")
local ConfigManager = require("ConfigManager")

---@class AvatarStateMachine:StateMachine 角色状态机
---@field CurrentState AvatarState 当前状态
---@field View AvatarView 角色界面
---@field Info AvatarInfo 角色数据
---@field TargetPos Vector2 目标tile
local AvatarStateMachine = Class("AvatarStateMachine",StateMachine)

AvatarStateMachine.eStateName = {
    ------- hotel -------------
    --站立（出生时）
    HotelStand = "HotelStand",
    --旅店场景移动
    HotelMove = "HotelMove",
    --房间排队
    LoungeWait = "LoungeWait",
    ------------lounge room----------
    --休息室移动
    LoungeMove = "LoungeMove",
    --等待使用设备
    WaitFurniture = "WaitFurniture",
    --使用设备
    UseFurniture = "UseFurniture",
    --休息室站立
    LoungeStand = "LoungeStand",
    --需要家具
    NeedFurniture = "NeedFurniture"
}
---@class AvatarStateMachine.eDirection
AvatarStateMachine.eDirection = {
    LeftTop = 1,
    RightTop = 2,
    RightBottom = 3,
    LeftBottom = 4,
}

---@class AvatarStateMachine.eHudType
AvatarStateMachine.eHudType = {
    NeedFurniture = 1,
    Face = 2,
    Dialog = 3
}

---@param avatarInfo AvatarInfo 角色数据（必须要）
function AvatarStateMachine:__init(avatarInfo)
    self.super.__init(self)
    self.Info = avatarInfo

    self:InitStates()

    self.Direction = AvatarStateMachine.eDirection.LeftTop
end

function AvatarStateMachine:InitStates()

    ------- hotel -------------
    self:AddState(HotelStandState.New(AvatarStateMachine.eStateName.HotelStand))
    ---移动状态
    self:AddState(HotelMoveState.New(AvatarStateMachine.eStateName.HotelMove))
    ---房间移动状态
    self:AddState(LoungeMoveState.New(AvatarStateMachine.eStateName.LoungeMove))
    ---房间排队状态
    self:AddState(LoungeWaitState.New(AvatarStateMachine.eStateName.LoungeWait))
    ---家具使用等候
    self:AddState(WaitFurnitureState.New(AvatarStateMachine.eStateName.WaitFurniture))
    ---家具使用
    self:AddState(UseFurnitureState.New(AvatarStateMachine.eStateName.UseFurniture))
    ---休息室站立
    self:AddState(LoungeStandState.New(AvatarStateMachine.eStateName.LoungeStand))
    ---需要家具
    self:AddState(NeedFurnitureState.New(AvatarStateMachine.eStateName.NeedFurniture))
    ------------lounge room----------

end
------切换状态
-----@param name string 名字
function AvatarStateMachine:ChangeState(name)
    self.super.ChangeState(self,name)
    ---保存state
    self.Info.StateName = name
end

---@param avatarView AvatarView 角色界面
function AvatarStateMachine:SetView(avatarView)
    self.View = avatarView
    -- 皮肤
    self:SetViewSkin(self.Info.SkinName)
    -- 还原位置
    local pos =   MapManager:GetInstance():CellToLocal(self.Info.RoomId,self.Info.TileX,self.Info.TileY)
    self:SetViewPosition(pos)
    self:SetViewDirection(self.Direction)
    --还原动作
    self:SetViewAnim(self.Info.AnimName,true)
    --设置气泡
    self:SetViewBubble(self.Info.BubbleId,self.Info.NeedFurnitureId,self.Info.AngryBubbleId)
    if self.CurrentState ~= nil then
        self.CurrentState:InitViewState()
    end
end
-----是否有界面
--function AvatarStateMachine:HasView()
--    return self.View ~= nil
--end

--function AvatarStateMachine:GetWorldPos()
--    if self.View ~= nil then
--        return self.View:GetWorldPos()
--    else
--        return Vector3.zero
--    end
--end
---@param tilePos Vector2 位置
---@param speed number 速度
function AvatarStateMachine:MoveToTarget(tilePos,speed)
    --if self.View ~= nil then
    --    self.View:MoveTo(pos,speed)
    --end

    self.Speed = speed
    self.RoadPoses = {}
    ---地图组件加载完成了，使用寻路
    if MapManager:GetInstance():IsMapInit() then
        local from = Vector3.New(self.Info.TileX,self.Info.TileY)
        local to = Vector3.New(tilePos.x,tilePos.y,0)
        local path = MapManager:GetInstance():GetPath(self.Info.RoomId,from,to)
        if path ~= nil and path.Count > 0  then
            --寻路过去
            for i = 1, path.Count do
                table.insert(self.RoadPoses,path[i-1])
                --Log.Info("[GetPath]:%s,%s",self.RoadPoses[i-1].x,self.RoadPoses[i-1].y)
            end
        else
            table.insert(self.RoadPoses,tilePos)
        end
    else
        table.insert(self.RoadPoses,tilePos)
    end

    self.IsArriveTarget = false
    self:SetNextMove()
end

function AvatarStateMachine:SetNextMove()
    if #self.RoadPoses > 0 then
        self.TargetPos = table.remove(self.RoadPoses,1)
        self.MoveStartPos = MapManager:GetInstance():CellToLocal(self.Info.RoomId,self.Info.TileX,self.Info.TileY)
        self.MoveEndPos = MapManager:GetInstance():CellToLocal(self.Info.RoomId,self.TargetPos.x,self.TargetPos.y)
        self.MoveTotalTime = self.MoveStartPos:Clone():Sub(self.MoveEndPos):Magnitude()/self.Speed
        self.MoveTime = 0
        --方向
        self:CheckViewDirection(self.MoveStartPos,self.MoveEndPos)
    else
        self.IsArriveTarget = true

        self.TargetPos = nil
        self.Speed = nil
        self.MoveStartPos = nil
        self.MoveEndPos = nil
        self.MoveTime = nil
    end

end

function AvatarStateMachine:CheckViewDirection(from,to)
    local vec = to:Clone():Sub(from)
    local angle = Vector3.AngleAroundAxis(Vector3.New(0,1,0),vec,Vector3.New(0,0,1))
    --Log.Debug("Angle Current:%s",angle)
    local direction = AvatarStateMachine.eDirection.LeftTop
    if angle > 0 and angle <= 90 then
        direction = AvatarStateMachine.eDirection.LeftTop
    elseif angle > 90 and angle <=180 then
        direction = AvatarStateMachine.eDirection.LeftBottom
    elseif angle <= 0 and angle >-90 then
        direction = AvatarStateMachine.eDirection.RightTop
    elseif angle <=-90 and angle >=-180 then
        direction = AvatarStateMachine.eDirection.RightBottom
    end

    if self.Direction ~= direction then
        self:SetViewDirection(direction)
    end
    self.Direction = direction
end

function AvatarStateMachine:Update()
    self.super.Update(self)
    if not self.IsPause then
        if self.TargetPos ~= nil then
            local pos = nil
            self.MoveTime = self.MoveTime + Time.deltaTime
            if self.MoveTime >= self.MoveTotalTime then
                ---到达了
                pos = self.MoveEndPos:Clone()
                self:SetNextMove()
            else
                --设置当前位置
                local normal = self.MoveEndPos:Clone():Sub(self.MoveStartPos):SetNormalize()
                pos = self.MoveStartPos:Clone():Add(normal:Mul(self.Speed * self.MoveTime))
            end
            if pos ~= nil then
                self:SetViewPosition(pos:Clone())
                local tileX,tileY = MapManager:GetInstance():LocalToCell(self.Info.RoomId,pos)
                self.Info.TileX = tileX
                self.Info.TileY = tileY
            end

        end
    end
end

---重设Info位置
---@param tileX number TileX
---@param tileY number TileY
---@param offset Vector2 偏移
function AvatarStateMachine:SetInfoPosition(tileX,tileY,offset)
    self.Info.TileX = tileX
    self.Info.TileY = tileY
    local pos =   MapManager:GetInstance():CellToLocal(self.Info.RoomId,self.Info.TileX,self.Info.TileY)
    if offset ~= nil then
        pos = pos:Add(Vector3.New(offset.x,offset.y,0))

    end
    self:SetViewPosition(pos:Clone())
end


---更新位置
---@param pos Vector3
function AvatarStateMachine:SetViewPosition(pos)
    ---移动状态调整
    if self.CurrentState.Name == AvatarStateMachine.eStateName.HotelMove then
        pos = pos:Add(Vector3.New(0,self.Info.RandomY,0))
    end
    if self.View ~= nil then
        self.View:SetPosition(pos)
    end
end

---设置方向
---@param dir AvatarStateMachine.eDirection
function AvatarStateMachine:SetViewDirection(dir)
    if self.View ~= nil then
        self.View:SetDirection(dir)
    end
end

function AvatarStateMachine:SetInfoSkin(skinName)
    self.Info.SkinName = skinName
    self:SetViewSkin(skinName)
end
function AvatarStateMachine:SetViewSkin(skinName)
    if self.View ~= nil then
        self.View:SetSkin(skinName)
    end
end

---@param name string 动作名
---@param loop boolean 循环
---@param complete fun() 完成回调
function AvatarStateMachine:SetInfoAnim(name,loop,complete)
    self.Info.AnimName = name
    self:SetViewAnim(name,loop,complete)
end

function AvatarStateMachine:SetViewAnim(name,loop,complete)
    if self.View ~= nil then
        if name ~= "" then
            self.View:SetAnim(name,loop,complete)
        end
    end
end

function AvatarStateMachine:SetInfoBubble(bubbleId,needFurnitureId,angryBubbleId)
    self.Info.BubbleId = bubbleId
    self.Info.NeedFurnitureId = needFurnitureId or 0
    self.Info.AngryBubbleId = angryBubbleId or 0
    self:SetViewBubble(bubbleId,needFurnitureId,angryBubbleId)
end

function AvatarStateMachine:SetViewBubble(bubbleId,needFurnitureId,angryBubbleId)
    if self.View ~= nil then
        if bubbleId == 0 then
            self.View:ShowNoBubble()
        else
            local bubbleConfig = Config.expression_bubble[bubbleId]
            if bubbleConfig.bubble_type == AvatarView.eBubbleType.NeedFurniture then
                self.View:ShowNeed(bubbleId,needFurnitureId)
            elseif bubbleConfig.bubble_type == AvatarView.eBubbleType.Face then
                self.View:ShowFace(bubbleId,angryBubbleId,self.Time - self.Info.AngryStartTime)
            elseif bubbleConfig.bubble_type == AvatarView.eBubbleType.Dialog then
                self.View:ShowDialog(bubbleId)
            end
        end
    end
end
--region ----------------设置数据--------------
---移除精灵
function AvatarStateMachine:ClearAvatar()
    --界面移除
    EventManager:GetInstance():Broadcast(AvatarEvent.ClearAvatarView,self.Info.Id)
    AvatarManager:GetInstance():ClearAvatar(self.Info)
end
---进入房间
function AvatarStateMachine:EnterRoom(roomId)
    self.Info.GotoPos = 0
    self.Info.QueueIndex = 0
    local exitRoomId = self.Info.RoomId
    --更新去过的房间
    if roomId ~= SceneManager.eRoomId.Hotel then
        table.insert(self.Info.FinishRoomIds,roomId)
    end
    if roomId == SceneManager.eRoomId.Lounge then ---休息室
        ---位置切换到休息室入口
        self.Info.TileX = MapManager:GetInstance().Positions[MapManager.ePosition.LoungeDoor][1].x
        self.Info.TileY = MapManager:GetInstance().Positions[MapManager.ePosition.LoungeDoor][1].y
    elseif roomId == SceneManager.eRoomId.Hotel then
        ---位置切换到休息室门口排队
        self.Info.TileX = MapManager:GetInstance().Positions[MapManager.ePosition.LoungeRoomWait][1].x
        self.Info.TileY = MapManager:GetInstance().Positions[MapManager.ePosition.LoungeRoomWait][1].y
    end
    --更新房间
    self.Info.RoomId = roomId
    EventManager:GetInstance():Broadcast(AvatarEvent.EnterRoom,roomId,self.Info.Id)
    EventManager:GetInstance():Broadcast(AvatarEvent.ExitRoom,exitRoomId,self.Info.Id)
end

function AvatarStateMachine:SaveEnterRoom(roomId)

    table.insert(self.Info.FinishRoomIds,roomId)
end

--endregion ----------------设置数据--------------


--region --------------  通用 ------------------------
---是否能去使用家具
---@return boolean
function AvatarStateMachine:LoungeCanGotoFurniture(furnitureTypeId)
    ---有家具
    local furnitureDone = DeviceData:GetInstance():GetCurUseFurnitureData(self.Info.RoomId,furnitureTypeId) ~= nil
    if furnitureDone then
        local hasGoto = #AvatarManager:GetInstance():GetFurnitureStateMachines(AvatarStateMachine.eStateName.LoungeMove,furnitureTypeId) > 0
        ---没人去
        if not hasGoto then
            local waiter = AvatarManager:GetInstance():GetFurnitureStateMachines(AvatarStateMachine.eStateName.WaitFurniture,furnitureTypeId)
            local posNum = MapManager:GetInstance():GetFurnitureWaitMaxCount(furnitureTypeId)
            ---有空位置
            if #waiter < posNum then
                return true
            end
        end
    end

    return false
end


--endregion --------------  通用 ------------------------
function AvatarStateMachine:Destroy()
    self.View = nil
    self.Info = nil
end
return AvatarStateMachine