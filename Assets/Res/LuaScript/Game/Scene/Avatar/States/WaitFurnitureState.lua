---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asd.
--- DateTime: 2022/11/25 11:57
---
local ConfigManager = require("ConfigManager")
local MapManager = require("MapManager")
local AvatarManager = require("AvatarManager")
local AvatarStateMachine = require("AvatarStateMachine")
local EventManager = require("EventManager")
local AvatarEvent = require("AvatarEvent")
local Config = Config

local AvatarState = require("AvatarState")

------@class WaitFurnitureState:AvatarState 等待使用家具状态
---@field Machine AvatarStateMachine
---@field FurnitureTypeId number 家具类型
---@field QueueIndex number
local WaitFurnitureState = Class("WaitFurnitureState",AvatarState)

function WaitFurnitureState:__init()
    self.Speed = 20
    self.QueueIndex = 0
end

---进入状态
---@override
function WaitFurnitureState:Enter()
    self:AddEvent()
    self.FurnitureTypeId = self.Machine.Info.UseFurnitureId
    self.FurnitureConfig = ConfigManager.furniture[self.FurnitureTypeId]
    ---设置动作
    self.Machine:SetInfoAnim("idle",true)

    self.QueueIndex = self.Machine.Info.QueueIndex
    self:SetTargetAndMove(self.QueueIndex)
    self.CheckUse = false
end


function WaitFurnitureState:SetTargetAndMove(queueIndex)
    local queuePoses = MapManager:GetInstance().FurnitureQueuePosDic[self.FurnitureTypeId]
    local targetPos = queuePoses[queueIndex]
    ---移动到pos
    if targetPos ~= nil then
        self.Machine:SetInfoAnim("walk",true)
        self.Machine:MoveToTarget(targetPos,self.Speed)
    end
end
---退出状态
---@override
function WaitFurnitureState:Exit()
    self.QueueIndex = 0
    self:RemoveEvent()
end


function WaitFurnitureState:AddEvent()
    EventManager:GetInstance():AddListener(AvatarEvent.FurnitureWaitUpdate,self.OnFurnitureWaitUpdate,self)
end

function WaitFurnitureState:RemoveEvent()
    EventManager:GetInstance():RemoveListener(AvatarEvent.FurnitureWaitUpdate,self.OnFurnitureWaitUpdate,self)
end

function WaitFurnitureState:OnFurnitureWaitUpdate(furnitureTypeId)
    if self.FurnitureTypeId == furnitureTypeId then
        self.QueueIndex = self.QueueIndex -1
        self.Machine.Info.QueueIndex = self.QueueIndex
        self:SetTargetAndMove(self.QueueIndex)
    end
end
---状态机更新
---@override
function WaitFurnitureState:Update()
    if self.Machine.IsArriveTarget then
        self.Machine.IsArriveTarget = nil
        self.Machine:SetInfoAnim("idle",true)
        if self.QueueIndex == 1 then
            self.CheckUse = true
        end
    end

    if self.CheckUse then
        --找可以使用的家具空位
        local furnitureCanUseIndex = self:GetFurnitureCanUseIndex()
        if furnitureCanUseIndex > 0 then
            --更新排队
            self:RemoveEvent()
            EventManager:GetInstance():Broadcast(AvatarEvent.FurnitureWaitUpdate,self.FurnitureTypeId)
            --切换使用家具
            self.Machine.Info.QueueIndex = furnitureCanUseIndex
            self.Machine:ChangeState(AvatarStateMachine.eStateName.UseFurniture)
        end
    end

end

function WaitFurnitureState:GetFurnitureCanUseIndex()
    local unUseIndex ={}
    local usePoses = MapManager:GetInstance().FurnitureUsePosDic[self.FurnitureTypeId]
    for i = 1, #usePoses do
        local has = false
        for k, v in pairs(AvatarManager:GetInstance().Machines) do
            if v.Info.UseFurnitureId == self.FurnitureTypeId and --家具id
                    v.Info.QueueIndex == i and    --队列index
                    v.CurrentState ~= nil and (v.CurrentState.Name == AvatarStateMachine.eStateName.UseFurniture or v.CurrentState.Name == AvatarStateMachine.eStateName.LoungeStand) then --状态
                has = true
            end
        end
        if not has then
            table.insert(unUseIndex,i)
        end
    end
    if #unUseIndex >0 then
        return unUseIndex[Mathf.Random(1,#unUseIndex)]
    else
        return 0
    end
end


return WaitFurnitureState