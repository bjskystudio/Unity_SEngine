---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Simon.L.
--- DateTime: 2022/11/17 15:42
---
local BaseState = require("BaseState")
local TimeUtil = require("TimeUtil")

---@class StateMachine 状态机
---@field StateDict table<string,BaseState> 所有状态
---@field CurrentState BaseState 当前状态
---@field PrevState BaseState 上一个状态
---@field IsPause boolean 是否暂停
---@field Time number 当前运行时间
local StateMachine = Class("StateMachine")


---@private
function StateMachine:__init()
    self.Transfers = {}
    self.States = {}
    self.CurrentState = nil
    self.Time = 0
end
---暂停
function StateMachine:Pause()
    if not self.IsPause then
        self.IsPause = true
    end
end

---恢复
function StateMachine:Resume()
    if self.IsPause then
        self.IsPause = false
        self:Update()
    end
end

function StateMachine:Update()
    if not self.IsPause then
        --更新time
        self.Time = self.Time + Time.deltaTime
        if self.CurrentState ~= nil then
            self.CurrentState:Update()
        end
    end
end

--region -------------状态---------------
----新加状态
---@param state BaseState
function StateMachine:AddState(state)
    if state.Name ~= nil then
        state.Machine = self
        self.States[state.Name] = state
    end
end

----切换状态
---@param name string 名字
function StateMachine:ChangeState(name)
    if self.States[name] == nil then
        self.CurrentState = nil
        return
    end
    ---推出状态
    if self.CurrentState ~= nil then
        self.CurrentState:Exit()
    end
    self.PrevState = self.CurrentState
    ---进入状态
    self.CurrentState = self.States[name]
    self.CurrentState:Enter()
end

----获取状态
function StateMachine:GetState(name)
    if self.States[name] ~= nil then
        return self.States[name]
    end
end
--endregion -------------状态---------------
---释放
---@override
function StateMachine:Destroy()

end

return StateMachine