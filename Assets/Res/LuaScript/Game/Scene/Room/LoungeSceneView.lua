---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Simon.L
--- DateTime: 2022/10/9 19:02
---

local SceneViewBase = require("SceneViewBase")
local GameEvent = require("GameEvent")
local Log = require("Log")
local TimerInst = require("TimerManager"):GetInstance()
local SceneManager = require("SceneManager")
local DeviceData = require("DeviceData")
local DeviceDataInst = require("DeviceData"):GetInstance()
local TimeUtil = require("TimeUtil")
local GameDefine = require("GameDefine")
local AvatarManager = require("AvatarManager")
local AvatarEvent = require("AvatarEvent")
local MapManager = require("MapManager")
local ConfigManager = require("ConfigManager")
local HotelData = require("HotelData")
local CoinView = require("CoinView")
local FurnitureTransView = require("FurnitureTransView")
local ResLoadManager = require("ResLoadManager")
local AvatarStateMachine = require("AvatarStateMachine")

---@class LoungeSceneView : SceneViewBase 休息室
---@field private go_table LoungeSceneView_GoTable GoTable
---@field private ParentCls UIBase 父窗口类
---@field SortInfoList LoungeSortInfo[] 排序数据
---@field CoinViews CoinView[] 金币掉落
local LoungeSceneView = Class("LoungeSceneView", SceneViewBase)

---@class LoungeSceneView.spiderSingle 蜘蛛动画对象
LoungeSceneView.spiderSingle = {
    position = nil,
    otType = nil
}

---@class LoungeSceneView.eSortType 排序的类型
LoungeSceneView.eSortType = {
    Avatar = 1,
    FurnitureSingle = 2
}
---@class LoungeSceneView.FurnitureNodeState
LoungeSceneView.FurnitureNodeState = {
    Locked = 1,
    TransPort = 2,
    TransFinish = 3,
    Show = 4
}
---添加Events监听事件
function LoungeSceneView:Awake()
    --self.Timer = TimerInst:GetTimerStart(1,self.OnTimer,self)
    --家具升级
    self:AddEvent(GameEvent.UpGradeFurnitureEvent)
    --运输完成
    self:AddEvent(GameEvent.FurnitureOnTheWayOverEvent)

    self:AddEvent(GameEvent.RoomFurnitureLookAt)
    --点击场景使用
    self:AddEvent(GameEvent.RoomFurnitureEffectFinish)
    --家具更换事件
    self:AddEvent(GameEvent.ChangeFurnitureEvent)
    --家具立即解锁
    self:AddEvent(GameEvent.UnlockFurnitureImmediately)
    --进出房间
    self:AddEvent(AvatarEvent.EnterRoom)
    self:AddEvent(AvatarEvent.ExitRoom)
    --触发金币
    self:AddEvent(GameEvent.TriggerCoin)
    self:AddEvent(GameEvent.CoinCollected)

    --家具使用中事件
    self:AddEvent(GameEvent.UseFurnitureEvent)
    --家具使用完成事件
    self:AddEvent(GameEvent.ExitFurnitureEvent)
end
--- 窗口显示[protected]
---@param ... any @窗口传参
function LoungeSceneView:OnCreate()
    self.SortInfoList = {}
    self.NodeEffectDic = {}
    self.RoomId = SceneManager:GetInstance().RoomId
    self.FurnitureNodeSpineMap = {}   --家具spine数据
    ---大通铺大小
    --self:ResetSceneSize(Vector2.New(1181, 1181))
    self:ResetSceneSize(Vector2.New(1500, 1500), Vector3.New(1, 2.5, 1.6), Vector2.New(0, 150))
    ---初始化家具节点
    self:InitFurnitureNodes()

    ---运输中的家具
    self.TransFurnitureComps = {}
    ---@type table<number,DeviceFieldData>
    local houseDeviceData = DeviceDataInst:GetHouseData(self.RoomId)
    for i, v in pairs(houseDeviceData) do

        --场景家具节点
        --local furnitureNode = self:GetFurnitureNode(i)
        ---@type FurnitureView
        local nodeView = self:GetFurnitureNode(i)
        if nodeView ~= nil then
            local furnitureNode = nodeView.gameObject
            --家具显示
            if v.CurUseFurnitureId ~= nil then
                self:ShowFurnitureImage(v.CurUseFurnitureId)
            else
                furnitureNode:SetActive(false)
            end
            --处理运输
            if v.OnThewayFiledIds ~= nil and table.count(v.OnThewayFiledIds) > 0 then
                --运输中id
                local transPostIds = table.keys(v.OnThewayFiledIds)
                --运输中endtime
                local transPostEndtimes = table.values(v.OnThewayFiledIds)
                if #transPostIds > 0 then
                    local curTransportId = transPostIds[1]
                    local curTransportEndTime = transPostEndtimes[1]
                    if curTransportEndTime > TimeUtil.GetSecTime() then
                        --运输中
                        self:SetFurnitureNodeState(furnitureNode, LoungeSceneView.FurnitureNodeState.TransPort, curTransportId)
                    else
                        --运输完成
                        self:SetFurnitureNodeState(furnitureNode, LoungeSceneView.FurnitureNodeState.TransFinish, curTransportId)
                    end
                end
            end
        else
            Log.Debug("furnitureNode not exsit ID:" .. i)
        end
    end
    --人物精灵

    self:InitAvatars()
    self:InitCoinViews()
    ---帧刷新
    self.OrderTimer = TimerInst:GetTimerStartImme(6, self.OnOrderTimer, self, false, true);

    ---初始化背景spine动画
    self:BackgroundSpineInit()
end
function LoungeSceneView:BackgroundSpineInit()
    self.go_table.obj_bgSpine.gameObject:SetActive(true)
    self.go_table.obj_spider.gameObject:SetActive(true)

    self.spiderSpine = self.go_table.obj_spider:GetComponent(typeof(CS.SEngine.UI.UISpine))
    self.spiderSpine:PlayAnim("down", false, function()

        if (self.spiderMovePosArray == nil) then
            self.spiderMovePosArray = {}
        end
        if (self.spiderOtMap == nil) then
            ---存储某个位置的图案类型
            self.spiderOtMap = {}
        end

        local nodeCount = self.go_table.obj_spiderOtSpine.transform.childCount
        for i = 1, nodeCount do
            local node = self.go_table["obj_spiderPos" .. i]
            local type = self:GetSpiderRadomType(i)
            ---@type LoungeSceneView.spiderSingle
            local spiderSingle = {
                position = node.transform.localPosition,
                otType = type
            }
            table.insert(self.spiderMovePosArray, spiderSingle)
            self.spiderOtMap[i] = type
            --print(spiderSingle.otType .. "  " .. i)
        end

        self:SpiderStartMove()
    end)
end

function LoungeSceneView:GetSpiderRadomType(index)
    local spineNum = 3
    local numArray = {}
    for i = 1, spineNum do
        table.insert(numArray, i)
    end
    local numType = Mathf.Floor((index - 1) / spineNum)
    local deleteArray = {}
    for j, v in pairs(self.spiderOtMap) do
        if (Mathf.Floor((j - 1) / spineNum) == numType) then
            table.insert(deleteArray, v)
        end
    end
    if (table.count(deleteArray) > 0) then
        for j = 1, table.count(deleteArray) do
            for m = 1, table.count(numArray) do
                if (deleteArray[j] == numArray[m]) then
                    table.removebyvalue(numArray, deleteArray[j])
                end
            end
        end
    end

    local type = numArray[Mathf.Random(1, table.count(numArray))]
    return type
end

function LoungeSceneView:SpiderStartMove()
    local count = table.count(self.spiderMovePosArray)
    if (count <= 0) then
        local x = self.spiderSpine.transform.localPosition.x
        local y = self.spiderSpine.transform.localPosition.y

        local leavePos = Vector3.New(0, 0, 0)
        local offset = 1000
        if (x > 0 and y > 0) then
            leavePos = Mathf.Abs(x) > Mathf.Abs(y) and Vector3.New(x + offset, y, 0) or Vector3.New(x, y + offset, 0)
        elseif (x > 0 and y < 0) then
            leavePos = Mathf.Abs(x) > Mathf.Abs(y) and Vector3.New(x + offset, y, 0) or Vector3.New(x, y - offset, 0)
        elseif (x < 0 and y > 0) then
            leavePos = Mathf.Abs(x) > Mathf.Abs(y) and Vector3.New(x - offset, y, 0) or Vector3.New(x, y + offset, 0)
        else
            leavePos = Mathf.Abs(x) > Mathf.Abs(y) and Vector3.New(x - offset, y, 0) or Vector3.New(x, y - offset, 0)
        end

        self:SpiderMoveToTarget(leavePos, function()
            self.spiderSpine.transform.gameObject:SetActive(false)
        end)

        return
    end
    self.spiderSpine:PlayAnim("walk", true)

    local index = Mathf.Random(1, count)
    local spiderSingle = self.spiderMovePosArray[index]
    local endPos = spiderSingle.position
    local type = spiderSingle.otType

    self:SpiderMoveToTarget(endPos, function()
        self.spiderSpine:PlayAnim("attack", false, function()
            local node
            if (type == 1) then
                node = self.go_table.obj_spiderBat
            elseif type == 2 then
                node = self.go_table.obj_spiderGhost
            elseif type == 3 then
                node = self.go_table.obj_spiderSilk
            end

            local otClone = CS.UnityEngine.Object.Instantiate(node, self.go_table.obj_spiderOtSpine.transform)
            otClone.gameObject:SetActive(true)
            otClone.transform.localPosition = endPos
            if (type == 1) then
                otClone.transform.localRotation = Quaternion.AngleAxis(Mathf.Random(0, 1) > 0 and 30 or -30, Vector3.New(0, 0, 1))
            elseif type == 2 then
                otClone.transform.localRotation = Quaternion.AngleAxis(Mathf.Random(0, 1) > 0 and 0 or 180, Vector3.New(0, 1, 0))
            end
            table.remove(self.spiderMovePosArray, index)
            self:SpiderStartMove()

        end)
    end)
end

function LoungeSceneView:SpiderMoveToTarget(endPos, func)
    local speed = 200
    local target = Vector3.New(endPos.x, endPos.y, endPos.z)
    local vec = target:Sub(self.spiderSpine.transform.localPosition)
    local angle = Vector3.AngleAroundAxis(Vector3.New(0, 1, 0), vec, Vector3.New(0, 0, 1)) + 180
    self.spiderSpine.transform:DOLocalRotate(Vector3.New(0, 0, angle), 1):OnComplete(function()
        local distance = Vector3.Distance(self.spiderSpine.transform.localPosition, target)
        local time = Mathf.Abs(Mathf.Floor(distance / speed))
        self.spiderSpine.transform:DOLocalMove(endPos, time, false):OnComplete(function()
            func()
        end)
    end)
end

---@param node UnityEngine.GameObject
---@param state LoungeSceneView.FurnitureNodeState
function LoungeSceneView:SetFurnitureNodeState(node, state, showFurnitureId)
    local fieldId = DeviceDataInst:GetFieldId(showFurnitureId)
    ---@type UnityEngine.GameObject
    local transportGo = self:CloneTransportGo(node, fieldId)
    ---@type FurnitureTransView
    local transCom = self:GetOrAddComponent(transportGo, require("FurnitureTransView"), state, showFurnitureId)
    self.TransFurnitureComps[showFurnitureId] = transCom
end

---@param targetGo  UnityEngine.GameObject
function LoungeSceneView:CloneTransportGo(targetGo, fieldId)
    local transportGo
    local effectType = Config.furniture[fieldId].Effects_type
    if effectType == FurnitureTransView.eEffectType.Floor then
        --地板在顶层
        transportGo = CS.UnityEngine.Object.Instantiate(self.go_table.obj_transport, self.go_table.obj_transLayer.transform)
        transportGo.transform.localPosition = targetGo.transform.localPosition
        transportGo.transform.gameObject:SetActive(true)
    else
        transportGo = CS.UnityEngine.Object.Instantiate(self.go_table.obj_transport, targetGo.transform)
        transportGo.transform.localPosition = Vector3.zero
        transportGo.transform.gameObject:SetActive(true)
    end
    return transportGo
end

---初始化家具节点
function LoungeSceneView:InitFurnitureNodes()
    ---@type table<number,FurnitureView>
    self.FurnitureNodes = {}
    local FurnitureFieldArr = Config.GetConfigByField(Config.furniture, "house_type", { self.RoomId })
    --,function(l, r)
    --    return l.sort > r.sort
    --end

    for i = 1, #FurnitureFieldArr do
        ---@type furniture_field_Item
        local field = FurnitureFieldArr[i]

        local parts = {}
        local tilePos = MapManager:GetInstance().FurnitureTilePosDic[field.id] ---位置数据
        if (tilePos ~= nil and #tilePos > 1) then
            for j = 1, #tilePos do
                table.insert(parts, self.go_table["obj_" .. field.id .. "_" .. j])
            end
        else
            table.insert(parts, self.go_table["obj_" .. field.id])
        end
        local furnitureNode = self.go_table["obj_" .. field.id]
        local fView = self:GetOrAddComponent(furnitureNode, require("FurnitureView"), parts, field.id)
        self.FurnitureNodes[field.id] = fView




        --[[        ---@type SceneFurnitureNode
                local node = {
                    FurnitureId = field.id
                , FurnitureNode = self.go_table["obj_" .. field.id]
                , FurnitureImage = self.go_table["simg_" .. field.id]
                }
                self.FurnitureNodes[field.id] = node
                --先隐藏
                node.FurnitureImage.gameObject:SetActive(false)
                local tilePos = MapManager:GetInstance().FurnitureTilePosDic[field.id]
                if tilePos ~= nil and #tilePos > 0 then
                    --添加到排序中
                    ---@type LoungeSortInfo
                    local sortInfo = {
                        Type = LoungeSceneView.eSortType.FurnitureSingle,
                        Node = node.FurnitureNode,
                        PosX = tilePos[1].x,
                        PosY = tilePos[1].y,
                        OffsetY = Mathf.Random(1, 100) / 1000
                    }
                    table.insert(self.SortInfoList, sortInfo)
                end]]
    end

end

---获取家具节点
---@return FurnitureView
function LoungeSceneView:GetFurnitureNode(furnitureId)
    return self.FurnitureNodes[furnitureId]
end

---事件处理
---@private
---@param id EventID 事件ID
function LoungeSceneView:EventHandle(id, ...)
    --家具升级
    if id == GameEvent.UpGradeFurnitureEvent then
        self:OnUpGradeFurniture(...)
        --运输完成
    elseif id == GameEvent.FurnitureOnTheWayOverEvent then
        self:OnFurnitureTranslateFinish(...)
    elseif id == GameEvent.RoomFurnitureLookAt then
        --解锁完成使用
        self:OnRoomFurnitureLookAt(...)
    elseif id == GameEvent.RoomFurnitureEffectFinish then
        ---播放属性预制
        self:ShowShuXingUi(...)
        self:ShowFurnitureImage(...)
    elseif id == GameEvent.ChangeFurnitureEvent then
        self:OnChangeFurnitureEvent(...)
    elseif id == GameEvent.UnlockFurnitureImmediately then
        self:OnFurnitureImmeFinish(...)
    elseif id == AvatarEvent.EnterRoom then
        self:OnAvatarEnterRoom(...)
    elseif id == AvatarEvent.ExitRoom then
        self:OnAvatarExitRoom(...)
    elseif id == GameEvent.TriggerCoin then
        self:OnTriggerCoin(...)
    elseif id == GameEvent.CoinCollected then
        self:OnCoinCollected(...)
    elseif id == GameEvent.UseFurnitureEvent then
        self:OnOpenFurnitureSpineStatus(...)
    elseif id == GameEvent.ExitFurnitureEvent then
        self:OnExitFurnitureSpineStatus(...)
    end
end

---播放属性ui
function LoungeSceneView:ShowShuXingUi(furnitureId)
    self.ShowShuXingFurnitureId = furnitureId
    local fieldId = DeviceDataInst:GetFieldId(furnitureId)
    local nodeView = self:GetFurnitureNode(fieldId)

    ---@type furniture_level_Item
    local fData = Config.furniture_level[furnitureId]

    local tabStr = {}
    local tabImgStr = {}
    --房间属性 词条
    local paramsData = fData.param_num

    for i, v in pairs(fData.param_type) do
        local num = paramsData[i]
        local str
        local iconName = "Icon_coin"
        if (v == 1) then
            str = "+" .. num
            iconName = "Icon_coin"
        elseif v == 2 then
            str = "+" .. num .. "/m"
        elseif v == 3 then
            str = LanguageUtil:GetValue("Common_button_use") .. ":+" .. num
        elseif v == 4 then
            str = "+" .. num .. "/30s"
        elseif v == 5 then
            iconName = "Icon_Popularity"
            str = "+" .. num
        end
        table.insert(tabStr, str)
        table.insert(tabImgStr, iconName)
    end
    self.go_table.obj_shuxing.transform.localPosition = nodeView.transform.localPosition
    for i, v in pairs(tabStr) do
        local itemNodeClone = CS.UnityEngine.Object.Instantiate(self.go_table.obj_FurnitureFlyViewItem, self.go_table.obj_shuxing.transform)
        itemNodeClone.transform.gameObject:SetActive(true)
        itemNodeClone.transform.localPosition = Vector2.New(0, 0)
        local item = self:GetOrAddComponent(itemNodeClone, require("FurnitureFlyViewItem"))
        local time = i - 1
        item:InitData(v, tabImgStr[i], time, function()
            self:RemoveComponentInstance(item)
        end)
    end


end

function LoungeSceneView:CreateFurnitureCom(furnitureId, state)
    local fieldId = DeviceDataInst:GetFieldId(furnitureId)
    if IsNil(self.TransFurnitureComps[furnitureId]) then
        local nodeView = self:GetFurnitureNode(fieldId)
        if nodeView ~= nil then
            local nodeGo = nodeView.gameObject
            if nodeGo ~= nil then
                local transportGo = self:CloneTransportGo(nodeGo, fieldId)
                ---@type FurnitureTransView
                local transCom = self:GetOrAddComponent(transportGo, require("FurnitureTransView"), state, furnitureId)
                self.TransFurnitureComps[furnitureId] = transCom

                return transCom
            else
                return nil
            end
        end
    end
    return nil
end

---@param furnitureId number
---@param type DeviceData.UnlockType
function LoungeSceneView:OnUpGradeFurniture(furnitureId, type)
    if type == DeviceData.UnlockType.Normal then
        self:CreateFurnitureCom(furnitureId, LoungeSceneView.FurnitureNodeState.TransPort)
    end
end

---家具立即完成
function LoungeSceneView:OnFurnitureImmeFinish(furnitureId)
    ---@type FurnitureTransView
    local transCom = nil
    if IsNil(self.TransFurnitureComps[furnitureId]) then
        --没有创建一个
        transCom = self:CreateFurnitureCom(furnitureId, LoungeSceneView.FurnitureNodeState.TransFinish)
    else
        transCom = self.TransFurnitureComps[furnitureId]
    end
    transCom:PlayFinishEffect()
end

---运输完成显示勾勾
function LoungeSceneView:OnFurnitureTranslateFinish(furnitureId)
    ---@type FurnitureTransView
    local transCom = nil
    if IsNil(self.TransFurnitureComps[furnitureId]) then
        --没有创建一个
        transCom = self:CreateFurnitureCom(furnitureId, LoungeSceneView.FurnitureNodeState.TransFinish)
    else
        transCom = self.TransFurnitureComps[furnitureId]
    end
    transCom:ShowTransFinish()
end

---@param furnitureId number 移动到的家具id
function LoungeSceneView:OnRoomFurnitureLookAt(furnitureId, complete)
    local fieldId = DeviceDataInst:GetFieldId(furnitureId)
    local nodeView = self:GetFurnitureNode(fieldId)
    if nodeView ~= nil then
        self:CameraMoveTo(nodeView.transform.localPosition, 0.5, complete)
    end
end

function LoungeSceneView:RemoveTransView(furnitureId)
    if not IsNil(self.TransFurnitureComps[furnitureId]) then
        ---销毁运输
        ---@type FurnitureTransView
        local transCom = self.TransFurnitureComps[furnitureId]
        ---清理运输节点上的组件
        self:RemoveComponentInstance(transCom)
        self.TransFurnitureComps[furnitureId] = nil

    end
end

function LoungeSceneView:ShowFurnitureImage(furnitureId, showShiny)
    ---显示家具node
    local fieldId = DeviceDataInst:GetFieldId(furnitureId)
    ---@type FurnitureView
    local nodeView = self:GetFurnitureNode(fieldId)

    if nodeView ~= nil then

        local field = Config.furniture[fieldId]
        self:FurnitureSpineAlive(fieldId, false)
        local imageNodes = nodeView:GetImageNode()
        nodeView:SetNodeActive(true)
        local count = #imageNodes

        for i = 1, count do
            imageNodes[i].gameObject:SetActive(true)
            --处理显示
            if furnitureId ~= nil then
                local cfg = Config.furniture_level[furnitureId]

                if cfg ~= nil then

                    local imageName
                    if (count > 1 and fieldId ~= 10012) then
                        imageName = cfg.art .. "_" .. i
                    else
                        --资源相同
                        imageName = cfg.art
                    end
                    imageNodes[i]:LoadSprite(GameDefine.eResPath.AtlasRoomFurniture .. "Lounge/" .. imageName, true, 1)

                end
                if showShiny then
                    imageNodes[i]:ShowUIShiny(1.5, function()
                        if (i == count) then
                            self:InitLoadFurnitureSpine(field)

                        end
                    end)
                else

                    if (i == count) then
                        self:InitLoadFurnitureSpine(field)
                    end
                end
            end
        end


        --[[        node.FurnitureImage.gameObject:SetActive(true)
                --处理显示
                if furnitureId ~= nil then
                    local cfg = Config.furniture_level[furnitureId]
                    if cfg ~= nil then
                        node.FurnitureImage:LoadSprite(GameDefine.eResPath.AtlasRoomFurniture .. "Lounge/" .. cfg.art, true, 1)
                    end
                    if showShiny then
                        node.FurnitureImage:ShowUIShiny(1.5)
                    end
                end]]
    end
end

function LoungeSceneView:InitLoadFurnitureSpine(field)

    --加载动画
    self:LoadFurnitureSpinePreFab(field)

    --[[    ---初始加载家具动画时间
        if (self.loadSpineTimeMap == nil) then
            self.loadSpineTimeMap = {}
        end
        if (self.loadSpineTimeMap[fieldId] == nil) then
            self.loadSpineTimeMap[fieldId] = 0
        end
        if (self.loadSpineTimeMap[fieldId] == 0) then
            self:FurnitureSpineAlive(fieldId, true)

            self:DealSpecialFurniture(fieldId)--处理需要特殊处理的家具

            self.loadSpineTimeMap[fieldId] = 1
        else
            TimerInst:GetTimerStart(self.loadSpineTimeMap[fieldId], function()

            end, self, true)
        end]]
end
--处理房间里面正在使用的家具状态
function LoungeSceneView:PlayerInRoomFurniture(id)
    --初始数据处理
    ---@type AvatarStateMachine[]
    local useArray = AvatarManager:GetInstance():GetFurnitureStateMachines(AvatarStateMachine.eStateName.UseFurniture, id)
    local useCount = table.count(useArray)--正在使用的人数
    if (useCount > 0) then
        self:OnOpenFurnitureSpineStatus(id)
    end
    self:FurnitureSpineAlive(id, true)
    self:DealSpecialFurniture(id)--处理需要特殊处理的家具
end

---家具更换
function LoungeSceneView:OnChangeFurnitureEvent(furnitureId)
    self:ShowFurnitureImage(furnitureId, true)
    --self:OnFurnitureImmeFinish(furnitureId)
end

--region -----------------墙和地板升级闪光-------------------
function LoungeSceneView:StartNodeEffect(furnitureId)
    local fieldId = DeviceDataInst:GetFieldId(furnitureId)

    ---@type FurnitureView
    local nodeView = self:GetFurnitureNode(fieldId)
    if nodeView ~= nil then
        local imageNodes = nodeView:GetImageNode()
        for i = 1, #imageNodes do
            local seq = CS.DG.Tweening.DOTween.Sequence()
            seq:Append(imageNodes[i]:DOFade(0.5, 1.5))
            seq:Append(imageNodes[i]:DOFade(1, 1.5))
            seq:SetLoops(-1)
            self.NodeEffectDic[furnitureId] = seq
        end

    end
end
function LoungeSceneView:StopNodeEffect(furnitureId)
    if self.NodeEffectDic then
        local seq = self.NodeEffectDic[furnitureId]
        if seq then
            seq:Kill()
        end
    end
    --恢复透明度
    local fieldId = DeviceDataInst:GetFieldId(furnitureId)
    ---@type FurnitureView
    local nodeView = self:GetFurnitureNode(fieldId)
    if nodeView ~= nil then
        local imageNodes = nodeView:GetImageNode()
        for i = 1, #imageNodes do
            imageNodes[i].Alpha = 1
        end
        --nodeView.FurnitureImage.Alpha = 1
    end
end

--endregion -----------------墙和地板升级闪光-------------------

--region -------------------精灵view-------------------------
function LoungeSceneView:InitAvatars()
    ---管理所有avtarView
    local avatarMachines = AvatarManager:GetInstance():GetRoomAvatarMachines(self.RoomId)
    if avatarMachines ~= nil then
        for i = 1, #avatarMachines do
            local avatarGo, shadowGo = self:CloneAvatarNode(self.go_table.obj_scene)
            ---@type AvatarView
            local avatarView = self:GetOrAddComponent(avatarGo, require("AvatarView"), 1.2, false, shadowGo)
            local machine = avatarMachines[i]
            machine:SetView(avatarView)

            --添加到排序中
            ---@type LoungeSortInfo
            local sortInfo = {
                Type = LoungeSceneView.eSortType.Avatar,
                Node = avatarGo,
                Machine = machine
            }
            table.insert(self.SortInfoList, sortInfo)
        end
    end
end

---@param pNode UnityEngine.GameObject
---@return UnityEngine.GameObject
function LoungeSceneView:CloneAvatarNode(pNode)
    ---@type UnityEngine.GameObject
    local avatarGo = CS.UnityEngine.Object.Instantiate(self.go_table.obj_avatar, pNode.transform)
    avatarGo.transform.localPosition = Vector3.zero
    avatarGo.transform.gameObject:SetActive(true)
    --avatarGo.transform:SetLocalScaleXYZ(1.5)

    local shadowGo = CS.UnityEngine.Object.Instantiate(self.go_table.img_shadow.gameObject, self.go_table.obj_shadows.transform)
    shadowGo.transform.gameObject:SetActive(true)
    ---spine
    return avatarGo, shadowGo
end

function LoungeSceneView:OnAvatarEnterRoom(roomId, avatarId)
    if roomId == self.RoomId then
        local avatarGo, shadowGo = self:CloneAvatarNode(self.go_table.obj_scene)
        ---@type AvatarView
        local avatarView = self:GetOrAddComponent(avatarGo, require("AvatarView"), 1.2, false, shadowGo)
        local machine = AvatarManager:GetInstance():GetAvatarMachineById(avatarId)
        machine:SetView(avatarView)

        --添加到排序中
        ---@type LoungeSortInfo
        local sortInfo = {
            Type = LoungeSceneView.eSortType.Avatar,
            Node = avatarGo,
            Machine = machine
        }
        table.insert(self.SortInfoList, sortInfo)
    end
end

function LoungeSceneView:OnAvatarExitRoom(roomId, avatarId)
    if roomId == self.RoomId then
        self:OnClearAvatarView(avatarId)
    end
end
---清除avatarview
---@param avatarId number
function LoungeSceneView:OnClearAvatarView(avatarId)
    local machine = AvatarManager:GetInstance():GetAvatarMachineById(avatarId)
    local view = machine.View
    if view ~= nil then
        self:RemoveComponentInstance(view)
        machine:SetView(nil)
    else
        Log.Debug("精灵界面已经释放")
    end

    --从排序中移除
    for i = 1, #self.SortInfoList do
        if self.SortInfoList[i].Machine ~= nil and self.SortInfoList[i].Machine == machine then
            table.remove(self.SortInfoList, i)
            break
        end
    end
end

function LoungeSceneView:ClearAllAvatarView()
    local avatarMachines = AvatarManager:GetInstance():GetRoomAvatarMachines(self.RoomId)
    if avatarMachines ~= nil then
        for i = 1, #avatarMachines do
            avatarMachines[i]:SetView(nil)
        end
    end
end

---精灵排序
function LoungeSceneView:OnOrderTimer()
    for i = 1, #self.SortInfoList do
        local info = self.SortInfoList[i]
        if info.Type == LoungeSceneView.eSortType.Avatar then
            info.PosY = info.Machine.Info.TileY
            info.PosX = info.Machine.Info.TileX
            info.OffsetY = info.Machine.Info.RandomY
        end
    end
    table.sort(self.SortInfoList, function(a, b)
        if a.PosY == b.PosY then
            if a.PosX == b.PosX then
                return a.OffsetY > b.OffsetY
            else
                return a.PosX > b.PosX
            end
        else
            return a.PosY > b.PosY
        end
    end)
    local begin = 10
    for i = 1, #self.SortInfoList do
        self.SortInfoList[i].Node.transform:SetSiblingIndex(begin + i)
    end
end

--endregion -------------------精灵view-------------------------

--region -------------------------金币view-------------------
function LoungeSceneView:InitCoinViews()
    self.CoinViews = {}
    local roomCoins = HotelData:GetInstance():GetRoomCoinDatas(self.RoomId)
    for i = 1, #roomCoins do
        local fieldId = roomCoins[i].FurnitureFieldId
        local index = roomCoins[i].DropIndex
        local coinPos = MapManager:GetInstance():GetFurnitureCoinPos(self.RoomId, fieldId, index)
        local coinNode = self:CloneCoinNode(self.go_table.obj_scene, coinPos)
        ---@type FurnitureTransView
        local coinView = self:GetOrAddComponent(coinNode, require("CoinView"), roomCoins[i])
        coinView:initCoin()
        table.insert(self.CoinViews, coinView)

        --添加到排序中
        local tilePos = MapManager:GetInstance().FurnitureCoinPosDic[fieldId][index]
        ---@type LoungeSortInfo
        local sortInfo = {
            Type = LoungeSceneView.eSortType.FurnitureSingle,
            Node = coinNode,
            PosX = tilePos.x,
            PosY = tilePos.y,
            OffsetY = Mathf.Random(1, 100) / 1000
        }
        table.insert(self.SortInfoList, sortInfo)
    end
end

---@param furnitureFieldId number 家具typeId
---@param index number 掉落位置
function LoungeSceneView:GetCoinView(furnitureFieldId, dropIndex)
    if self.CoinViews ~= nil then
        for i = 1, #self.CoinViews do
            if self.CoinViews[i].FurnitureFieldId == furnitureFieldId and
                    self.CoinViews[i].DropIndex == dropIndex then
                return self.CoinViews[i]
            end
        end
    end
    return nil
end

---@param pNode UnityEngine.GameObject
---@return UnityEngine.GameObject
function LoungeSceneView:CloneCoinNode(pNode, pos)
    ---@type UnityEngine.GameObject
    local coinGo = CS.UnityEngine.Object.Instantiate(self.go_table.obj_coin, pNode.transform)
    coinGo.transform.localPosition = pos
    coinGo.transform.gameObject:SetActive(true)

    return coinGo
end
---触发金币收益
---@param coinData HotelCoinData 金币数据
function LoungeSceneView:OnTriggerCoin(coinData)
    local roomId = coinData.RoomId
    if roomId == self.RoomId then
        local fieldId = coinData.FurnitureFieldId
        local index = coinData.DropIndex
        local coinView = self:GetCoinView(fieldId, index)
        if coinView == nil then
            local coinPos = MapManager:GetInstance():GetFurnitureCoinPos(self.RoomId, fieldId, index)
            local coinNode = self:CloneCoinNode(self.go_table.obj_scene, coinPos)
            ---@type FurnitureTransView
            coinView = self:GetOrAddComponent(coinNode, require("CoinView"), coinData)
            table.insert(self.CoinViews, coinView)
            --添加到排序中
            local tilePos = MapManager:GetInstance().FurnitureCoinPosDic[fieldId][index]
            ---@type LoungeSortInfo
            local sortInfo = {
                Type = LoungeSceneView.eSortType.FurnitureSingle,
                Node = coinNode,
                PosX = tilePos.x,
                PosY = tilePos.y,
                OffsetY = Mathf.Random(1, 100) / 1000
            }
            table.insert(self.SortInfoList, sortInfo)
        end
        ---显示金币掉落
        coinView:ShowCoinEffect()
    end
end

---收取完金币
---@param coinData HotelCoinData 金币数据
function LoungeSceneView:OnCoinCollected(coinData)
    if coinData.RoomId == self.RoomId then
        local coinView = self:GetCoinView(coinData.FurnitureFieldId, coinData.DropIndex)
        if coinView ~= nil then
            --从排序中移除
            for i = 1, #self.SortInfoList do
                if self.SortInfoList[i].Node ~= nil and self.SortInfoList[i].Node == coinView.gameObject then
                    table.remove(self.SortInfoList, i)
                    break
                end
            end
            table.removebyvalue(self.CoinViews, coinView)
            self:RemoveComponentInstance(coinView)
            coinView = nil
        end
    end
end

--endregion -------------------------金币view-------------------

---可用
---@protected
function LoungeSceneView:OnEnable()
end

---不可用
---@protected
function LoungeSceneView:OnDisable()
end

---点击Button回调
---@param btn UnityEngine.UI.Button 按钮
function LoungeSceneView:OnClickBtn(btn)
end

---点击Toggle回调
---@protected
---@param toggle UnityEngine.UI.Toggle Toggle
---@param isOn boolean 是否选中
function LoungeSceneView:OnClickToggle(toggle, isOn)
end

---数据清理
---@protected
function LoungeSceneView:OnDestroy()
    --LoungeSceneView.ParentCls.OnDestroy(self)
    TimerInst:StopAndClearTimer(self.Timer)
    TimerInst:StopAndClearTimer(self.OrderTimer)
    self.SortInfoList = nil
    for i, v in pairs(self.NodeEffectDic) do
        v:Kill()
    end
    self:ClearAllAvatarView()
    self.CoinViews = nil
end

function LoungeSceneView:OnTimer()
    --Log.Debug("timer update")
end

---加载家具特效
---@param field  furniture_field_Item
function LoungeSceneView:LoadFurnitureSpinePreFab(field)
    if (field.id == 10001 or field.id == 10003 or field.id == 10010 or field.id == 10007) then
        self:DealBedSpine(field) --床
    elseif field.id == 10008 then
        --沙发
        self:DealSofaSpine(field)
    elseif field.id == 10002 then
        --入户柜子   有拆分
        self:DealGuiZiSpine(field)
    elseif field.id == 10011 then
        --娱乐区  有拆分
        self:DealGamesSpine(field)

    elseif field.id == 10009 then
        --坩埚
        self:DealCrucibleSpine(field)
    elseif field.id == 10005 then
        --占卜桌
        self:DealZhanBuDeskSpine(field)

    end

end

---@param field  furniture_field_Item
function LoungeSceneView:DealZhanBuDeskSpine(field)
    local useFurnitureId = DeviceData:GetInstance():GetCurUseFurnitureData(field.house_type, field.id) --当前房间当前栏位正在上使用的家具id
    if (useFurnitureId == nil) then
        return
    end
    local node = self.FurnitureNodeSpineMap[field.id]
    if (node ~= nil) then
        --print("已有预制，直接删除")
        self:DestroyFurnitureSpine(field.id)
    end
    local level = Config.furniture_level[useFurnitureId].level
    local path = "UI/Room/FurnitureSpine/zhanbuDesk_" .. level
    ResLoadManager:GetInstance():LoadObj(path, ResTypeEnum.ePrefab, true, function(go)
        if go ~= nil then
            go.transform:SetParent(self.go_table["obj_" .. field.id].transform, false)
            go.transform.gameObject:SetActive(false)
            go.transform:SetSiblingIndex(1)
            go.transform:Find("@_simg_furniture").transform.gameObject:SetActive(false)
            --go:ResetPRS()
            --go.transform:SetLocalScaleXYZ(0.05)
            go.transform.localPosition = Vector3.New(0, 0, 0)

            local spineNode = go.transform:Find("@_obj_spines").transform:Find("spine1")
            ---@type SEngine.UI.UISpine
            local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
            spine:PlayAnim("idle", true)
            self.FurnitureNodeSpineMap[field.id] = go
            self:PlayerInRoomFurniture(field.id)
            --print("加载完成  " .. "zhanbuDesk_" .. level)
        else
            --print("加载失败  " .. "zhanbuDesk_" .. level)
        end
    end)


end

---@param field  furniture_field_Item
function LoungeSceneView:DealCrucibleSpine(field)
    local useFurnitureId = DeviceData:GetInstance():GetCurUseFurnitureData(field.house_type, field.id) --当前房间当前栏位正在上使用的家具id
    if (useFurnitureId == nil) then
        return
    end
    local node = self.FurnitureNodeSpineMap[field.id]
    if (node ~= nil) then
        self:DestroyFurnitureSpine(field.id)
    end
    local level = Config.furniture_level[useFurnitureId].level
    local path = "UI/Room/FurnitureSpine/ganguo_" .. level
    ResLoadManager:GetInstance():LoadObj(path, ResTypeEnum.ePrefab, true, function(go)
        if go ~= nil then
            go.transform:SetParent(self.go_table["obj_" .. field.id].transform, false)
            go.transform.gameObject:SetActive(false)
            go.transform:SetSiblingIndex(1)
            go.transform:Find("@_simg_furniture").transform.gameObject:SetActive(false)
            --go:ResetPRS()
            --go.transform:SetLocalScaleXYZ(0.05)
            go.transform.localPosition = Vector3.New(0, 0, 0)

            local spineNode = go.transform:Find("@_obj_spines").transform:Find("spine1")
            ---@type SEngine.UI.UISpine
            local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
            spine:PlayAnim("idle", true)
            self.FurnitureNodeSpineMap[field.id] = go
            self:PlayerInRoomFurniture(field.id)
        end
    end)
end

---@param field  furniture_field_Item
function LoungeSceneView:DealGamesSpine(field)
    local useFurnitureId = DeviceData:GetInstance():GetCurUseFurnitureData(field.house_type, field.id) --当前房间当前栏位正在上使用的家具id
    if (useFurnitureId == nil) then
        return
    end
    local node = self.FurnitureNodeSpineMap[field.id]
    if (node ~= nil) then
        self:DestroyFurnitureSpine(field.id)
    end
    local level = Config.furniture_level[useFurnitureId].level
    if (level == 1) then
        --1级柜子
        local path = "UI/Room/FurnitureSpine/game2_" .. level
        ResLoadManager:GetInstance():LoadObj(path, ResTypeEnum.ePrefab, true, function(go)
            if go ~= nil then
                go.transform:SetParent(self.go_table["obj_" .. field.id .. "_2"].transform, false)
                go.transform.gameObject:SetActive(false)
                go.transform:SetSiblingIndex(1)
                go.transform:Find("@_simg_furniture").transform.gameObject:SetActive(false)
                local spineNode = go.transform:Find("@_obj_spines").transform:Find("spine1")
                ---@type SEngine.UI.UISpine
                local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
                local aniName = "TV_light_yellow"
                local rDnum = Mathf.Random(1, 3)
                if (rDnum == 1) then
                    aniName = "TV_light_yellow"
                elseif rDnum == 2 then
                    aniName = "TV_light_purple"
                else
                    aniName = "TV_light_blue"
                end

                spine:PlayAnim(aniName, true)
                --go:ResetPRS()
                --go.transform:SetLocalScaleXYZ(0.05)
                go.transform.localPosition = Vector3.New(0, 0, 0)
                self.FurnitureNodeSpineMap[field.id] = go
                go.transform.gameObject:SetActive(false)
                self:PlayerInRoomFurniture(field.id)
            end
        end)
    end
end

---@param field  furniture_field_Item
function LoungeSceneView:DealGuiZiSpine(field)
    local useFurnitureId = DeviceData:GetInstance():GetCurUseFurnitureData(field.house_type, field.id) --当前房间当前栏位正在上使用的家具id
    if (useFurnitureId == nil) then
        return
    end

    local node = self.FurnitureNodeSpineMap[field.id]
    if (node ~= nil) then
        self:DestroyFurnitureSpine(field.id)
    end

    local level = Config.furniture_level[useFurnitureId].level
    if (level == 1) then
        --1级柜子
        local path = "UI/Room/FurnitureSpine/guizi2_" .. level
        ResLoadManager:GetInstance():LoadObj(path, ResTypeEnum.ePrefab, true, function(go)
            if go ~= nil then
                go.transform:SetParent(self.go_table["obj_" .. field.id .. "_2"].transform, false)
                go.transform.gameObject:SetActive(false)
                go.transform:SetSiblingIndex(1)
                go.transform:Find("@_simg_furniture").transform.gameObject:SetActive(false)
                --go:ResetPRS()
                --go.transform:SetLocalScaleXYZ(0.05)
                go.transform.localPosition = Vector3.New(0, 0, 0)
                self.FurnitureNodeSpineMap[field.id] = go
                self:PlayerInRoomFurniture(field.id)
            else
                self.FurnitureNodeSpineMap[field.id] = nil
            end
        end)
    end

end

---@param field  furniture_field_Item
function LoungeSceneView:DealSofaSpine(field)

    local useFurnitureId = DeviceData:GetInstance():GetCurUseFurnitureData(field.house_type, field.id) --当前房间当前栏位正在上使用的家具id
    if (useFurnitureId == nil) then
        return
    end
    local node = self.FurnitureNodeSpineMap[field.id]
    if (node ~= nil) then
        self:DestroyFurnitureSpine(field.id)
    end

    local level = Config.furniture_level[useFurnitureId].level
    local path = "UI/Room/FurnitureSpine/sofa_" .. level
    ResLoadManager:GetInstance():LoadObj(path, ResTypeEnum.ePrefab, true, function(go)
        if go ~= nil then
            go.transform:SetParent(self.go_table["obj_" .. field.id].transform, false)
            go.transform:SetSiblingIndex(1)
            go.transform.gameObject:SetActive(false)
            go.transform:Find("@_simg_furniture").transform.gameObject:SetActive(false)
            --go:ResetPRS()
            --go.transform:SetLocalScaleXYZ(0.05)
            go.transform.localPosition = Vector3.New(0, 0, 0)
            self.FurnitureNodeSpineMap[field.id] = go
            self:PlayerInRoomFurniture(field.id)
        end
    end)


end

---@param field  furniture_field_Item
function LoungeSceneView:DealBedSpine(field)

    local useFurnitureId = DeviceData:GetInstance():GetCurUseFurnitureData(field.house_type, field.id) --当前房间当前栏位正在上使用的家具id
    if (useFurnitureId == nil) then
        return
    end
    local node = self.FurnitureNodeSpineMap[field.id]
    if (node ~= nil) then
        self:DestroyFurnitureSpine(field.id)
    end
    local level = Config.furniture_level[useFurnitureId].level
    local path = "UI/Room/FurnitureSpine/bed_" .. level
    ResLoadManager:GetInstance():LoadObj(path, ResTypeEnum.ePrefab, true, function(go)
        if go ~= nil then
            go.transform.gameObject:SetActive(false)
            go.transform:SetParent(self.go_table["obj_" .. field.id].transform, false)
            go.transform:SetSiblingIndex(1)
            go.transform:Find("@_simg_furniture").transform.gameObject:SetActive(false)
            --go:ResetPRS()
            --go.transform:SetLocalScaleXYZ(0.05)
            go.transform.localPosition = Vector3.New(0, 0, 0)
            self.FurnitureNodeSpineMap[field.id] = go
            self:PlayerInRoomFurniture(field.id)
        end
    end)


end

---@param fieldId number 栏位id
function LoungeSceneView:OnOpenFurnitureSpineStatus(fieldId)
    if (fieldId == 10009) then
        --坩埚
        local node = self.FurnitureNodeSpineMap[fieldId]
        local spineNode = node.transform:Find("@_obj_spines").transform:Find("spine1")
        ---@type SEngine.UI.UISpine
        local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
        spine:PlayAnim("walk", true)
    elseif fieldId == 10005 then
        if (self.zhanbuPeoPleNum == nil) then
            self.zhanbuPeoPleNum = 0
        end

        if (self.zhanbuPeoPleNum == 0) then
            --占卜桌
            local node = self.FurnitureNodeSpineMap[fieldId]
            local spineNode = node.transform:Find("@_obj_spines").transform:Find("spine1")
            ---@type SEngine.UI.UISpine
            local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
            spine:PlayAnim("walk", true)
        end
        self.zhanbuPeoPleNum = self.zhanbuPeoPleNum + 1

    elseif fieldId == 10011 then
        --游戏区 电视机

        if (self.TVpeopleNum == nil) then
            self.TVpeopleNum = 0
        end
        if (self.TVpeopleNum == 0) then
            local node = self.FurnitureNodeSpineMap[fieldId]
            node.transform.gameObject:SetActive(true)
            local spineNode = node.transform:Find("@_obj_spines").transform:Find("spine1")
            ---@type SEngine.UI.UISpine
            local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
            local aniName = "TV_light_yellow"
            local rDnum = Mathf.Random(1, 3)
            if (rDnum == 1) then
                aniName = "TV_light_yellow"
            elseif rDnum == 2 then
                aniName = "TV_light_purple"
            else
                aniName = "TV_light_blue"
            end
            spine:PlayAnim(aniName, true)
        end
        self.TVpeopleNum = self.TVpeopleNum + 1
    end
end

---@param fieldId number 栏位id
function LoungeSceneView:OnExitFurnitureSpineStatus(fieldId)
    if (fieldId == 10009) then
        --坩埚
        local node = self.FurnitureNodeSpineMap[fieldId]
        local spineNode = node.transform:Find("@_obj_spines").transform:Find("spine1")
        ---@type SEngine.UI.UISpine
        local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
        spine:PlayAnim("idle", true)
    elseif fieldId == 10005 then
        if (self.zhanbuPeoPleNum == 1) then
            --占卜桌

            local node = self.FurnitureNodeSpineMap[fieldId]
            local spineNode = node.transform:Find("@_obj_spines").transform:Find("spine1")
            ---@type SEngine.UI.UISpine
            local spine = spineNode.transform:GetComponent(typeof(CS.SEngine.UI.UISpine))
            spine:PlayAnim("idle", true)
        end

        self.zhanbuPeoPleNum = self.zhanbuPeoPleNum - 1

    elseif fieldId == 10011 then
        --游戏区 电视机

        if (self.TVpeopleNum == nil) then
            self.TVpeopleNum = 0
        end
        if (self.TVpeopleNum == 1) then
            local node = self.FurnitureNodeSpineMap[fieldId]
            node.transform.gameObject:SetActive(false)
        end
        self.TVpeopleNum = self.TVpeopleNum - 1
    end
end

---@param id number
---@param isAlive  boolean
function LoungeSceneView:FurnitureSpineAlive(id, isAlive)
    local node = self.FurnitureNodeSpineMap[id]
    if (node == nil) then
        return
    end
    node.transform.gameObject:SetActive(isAlive)
end
---@param id number
function LoungeSceneView:DestroyFurnitureSpine(id)
    self.FurnitureNodeSpineMap[id].transform.gameObject:SetActive(false)
    self.FurnitureNodeSpineMap[id].transform:DestroyGameObj()
    self.FurnitureNodeSpineMap[id] = nil
end

function LoungeSceneView:DealSpecialFurniture(fieldId)
    ---@type AvatarStateMachine[]
    local useArray = AvatarManager:GetInstance():GetFurnitureStateMachines(AvatarStateMachine.eStateName.UseFurniture, fieldId)
    local useCount = table.count(useArray)--正在使用的人数

    if (useCount <= 0 and fieldId == 10011) then
        --电视机 要默认关闭 有人才打开
        self:FurnitureSpineAlive(fieldId, false)
    end

    if (fieldId == 10009) then
        --坩埚需要隐藏图片
        ---@type FurnitureView
        local nodeView = self:GetFurnitureNode(fieldId)
        if nodeView ~= nil then
            local imageNodes = nodeView:GetImageNode()
            if (self.FurnitureNodeSpineMap[fieldId] ~= nil) then
                imageNodes[1].gameObject:SetActive(false)
            else
                imageNodes[1].gameObject:SetActive(true)
            end
        end
    end
end

return LoungeSceneView

---@class LoungeSortInfo 节点排序信息
---@field Node UnityEngine.GameObject 节点
---@field Type LoungeSceneView.eSortType 排序类型
---@field Machine AvatarStateMachine 精灵状态机
---@field PosY number
---@field PosX number
---@field OffsetY number