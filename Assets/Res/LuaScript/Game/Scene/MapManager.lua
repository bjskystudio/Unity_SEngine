---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asd.
--- DateTime: 2022/11/24 14:14
---
local ConfigManager = require("ConfigManager")
local SceneManager = require("SceneManager")
local EventManager = require("EventManager")
local GameEvent = require("GameEvent")

---@class MapManager : Singleton @地图tilemap管理器
---@field RoomAreaDic table<number,BoundsInt> 房间行动区域
---@field RoomBoundDic table<number,BoundsInt[]> 房间阻挡格
---@field FurnitureTilePosDic table<number,Vector2[]> 家具格子pos
---@field FurnitureBoundDic table<number,BoundsInt[]> 家具阻挡格
---@field FurnitureUsePosDic table<number,Vector2[]> 家具使用点
---@field FurnitureCoinPosDic table<number,Vector2[]> 家具金币掉落点
---@field FurniturePosDic table<number ,Vector2[]> 家具站立点
---@field FurnitureQueuePosDic table<number,Vector2[]> 家具排队点
---@field FurnitureExcursionDic table<number ,Vector2[]> 家具偏移坐标
---@field Positions table<MapManager.ePosition,Vector2[]> 固定点
local MapManager = Class("MapManager", Singleton)

---@class MapManager.ePosition
MapManager.ePosition = {
    --没有
    None = 0,
    --休息室排队
    LoungeRoomWait = 2,
    --出口
    OutPoint = 3,
    --休息室出入口
    LoungeDoor = 4,
    --使用设备
    Furniture = 5
}

--地图定义
---@class MapManager.eMapId
MapManager.eMapId = {
    HotelRoom = 1000,
    LoungeRoom = 1001
}

---@private
function MapManager:__init()
    self.RoomAreaDic = {}
    self.RoomBoundDic = {}
    self.FurnitureTilePosDic = {}
    self.FurnitureBoundDic = {}
    self.FurnitureUsePosDic = {}
    self.FurnitureCoinPosDic = {}
    self.FurniturePosDic = {}
    self.FurnitureQueuePosDic = {}
    self.FurnitureExcursionDic = {}
    self.Positions = {}

    self.InitComplete = false
end
--region ----------------------------------配置------------------------------

function MapManager:InitMapConfig()
    self:LoadRoomMapConfig()
    self:LoadFurniturePosConfig()
    self:LoadPositions()
    Log.Debug("MapData Initialized!")
end
---加载场景阻挡格配置
function MapManager:LoadRoomMapConfig()
    for i, v in pairs(ConfigManager.room_config) do
        if v.collider ~= nil and table.count(v.collider) > 0 then
            self.RoomBoundDic[v.Id] = self:GetConfigBounds(v.collider)
        end
        if v.Border ~= nil and table.count(v.Border) > 0 then
            self.RoomAreaDic[v.Id] = self:GetConfigBounds(v.Border)[1]
        end
    end
end

---加载家具位置配置
function MapManager:LoadFurniturePosConfig()
    for i, v in pairs(ConfigManager.furniture) do
        if v.collider ~= nil and table.count(v.collider) > 0 then
            self.FurnitureBoundDic[v.id] = self:GetConfigBounds(v.collider)
        end
        if v.usedrange ~= nil and table.count(v.usedrange) > 0 then
            self.FurnitureUsePosDic[v.id] = self:GetConfigPos(v.usedrange)
        end
        if v.queue ~= nil and table.count(v.queue) > 0 then
            self.FurnitureQueuePosDic[v.id] = self:GetConfigPos(v.queue)
        end
        if v.range ~= nil and table.count(v.range) > 0 then
            self.FurniturePosDic[v.id] = self:GetConfigPos(v.range)
        end
        if v.position ~= nil and table.count(v.position) > 0 then
            self.FurnitureTilePosDic[v.id] = self:GetConfigPos(v.position)
        end
        if v.excursion ~= nil and table.count(v.excursion) > 0 then
            self.FurnitureExcursionDic[v.id] = self:GetConfigPos(v.excursion)
        end
        if v.coinrange ~= nil and table.count(v.coinrange) > 0 then
            self.FurnitureCoinPosDic[v.id] = self:GetConfigPos(v.coinrange)
        end
    end
end

function MapManager:LoadPositions()
    self.Positions[MapManager.ePosition.LoungeRoomWait] = self:GetConfigPos(Config.game_config.waitqueue_room1001.paramNumArrs)
    self.Positions[MapManager.ePosition.OutPoint] = self:GetConfigPos(Config.game_config.client_wayout.paramNumArrs)
    self.Positions[MapManager.ePosition.LoungeDoor] = self:GetConfigPos(Config.game_config.lounge_door.paramNumArrs)
end

---@param boundsCfg number[][]
---@return BoundsInt[]
function MapManager:GetConfigBounds(boundsCfg)
    local ret = {}
    for i = 1, #boundsCfg do
        local v1 = Vector3.New(boundsCfg[i][1], boundsCfg[i][2], 0)
        local v2 = Vector3.New(boundsCfg[i][3], boundsCfg[i][4], 0)
        ---@type BoundsInt
        local bound = BoundsInt.New(v1, v2)
        table.insert(ret, bound)
    end
    return ret
end

---@param posCfg number[][]
---@return Vector2[]
function MapManager:GetConfigPos(posCfg)
    local ret = {}
    for i = 1, #posCfg do
        table.insert(ret, Vector2.New(posCfg[i][1], posCfg[i][2]))
    end
    return ret
end
---获取家具的最多排队人数
---@param furnitureTypeId number 家具类型id
function MapManager:GetFurnitureWaitMaxCount(furnitureTypeId)
    local poses = self.FurnitureQueuePosDic[furnitureTypeId]
    if poses ~= nil then
        return #poses
    else
        return 0
    end
end
---获取家具的最多使用人数
---@param furnitureTypeId number 家具类型id
function MapManager:GetFurnitureUseMaxCount(furnitureTypeId)
    local poses = self.FurnitureUsePosDic[furnitureTypeId]
    if poses ~= nil then
        return #poses
    else
        return 0
    end
end
---获取家具的包围盒信息
function MapManager:GetFurnitureBounds(furnitureTypeId)
    return self.FurnitureBoundDic[furnitureTypeId]
end

---获取家具金币掉落点
function MapManager:GetFurnitureCoinPos(mapId, furnitureTypeId, index)
    local cellPos = self.FurnitureCoinPosDic[furnitureTypeId][index]
    if cellPos ~= nil then
        return self:CellToLocal(mapId, cellPos.x, cellPos.y)
    else
        return Vector3.zero
    end
end

---获取家具使用点
function MapManager:GetFurnitureUsePos(mapId, furnitureTypeId, index)
    local cellPos = self.FurnitureUsePosDic[furnitureTypeId][index]
    if cellPos ~= nil then
        return self:CellToLocal(mapId, cellPos.x, cellPos.y)
    else
        return Vector3.zero
    end
end
--endregion ----------------------------------配置------------------------------

--region -----------------坐标转换 --------------------

-----本地坐标转tile坐标
-----@param mapId number 地图id
-----@param pos Vector3
-----@return Vector2
function MapManager:GetTilePos(mapId, pos)
    local offset = Vector3.zero
    local cellSizeX = 1
    local cellSizeY = 1
    if mapId == SceneManager.eRoomId.Lounge then
        offset.x = -493
        offset.y = -122
        cellSizeX = 20 / 2
        cellSizeY = 12.5 / 2
    elseif mapId == SceneManager.eRoomId.Hotel then
        cellSizeX = 10
        cellSizeY = 10
    end
    local pos2 = Vector3.New(pos.x, pos.y, pos.z)
    local pos2 = pos2:Sub(offset)
    return Vector2.New(Mathf.Floor(pos2.x / cellSizeX), Mathf.Floor(pos2.y / cellSizeY))
end
---tile坐标转本地坐标
---@param mapId number 地图id
---@param tilePos Vector2
---@return Vector3
function MapManager:GetLocalPos(mapId, tilePos)
    local offset = Vector3.zero
    local cellSizeX = 1
    local cellSizeY = 1
    if mapId == SceneManager.eRoomId.Lounge then
        offset.x = -494.2
        offset.y = -130.4
        cellSizeX = 20
        cellSizeY = 12.5
    elseif mapId == SceneManager.eRoomId.Hotel then
        cellSizeX = 10
        cellSizeY = 10
    end
    local pos = Vector3.New(tilePos.x * cellSizeX, tilePos.y * cellSizeY, 0)
    return pos:Add(offset)
end

--endregion -----------------坐标转换---------------------



--region --------------------------------地图组件接口 --------------------------
---初始化地图
---@param mapId number
function MapManager:InitMap(mapId)
    ---设置行动区域
    local area = self.RoomAreaDic[mapId]
    if area ~= nil then
        CS.SEngine.Map.MapService.Instance:SetPutAreaBounds(mapId, area.position, area.size)
    else
        Log.Error("Map%s:没有设置地图对应的区域!", mapId)
        return
    end
    ---设置阻挡格
    if self.RoomBoundDic[mapId] ~= nil then
        --CS.SEngine.Map.MapService.Instance:InitTile(mapId)
        local boundInts = self.RoomBoundDic[mapId]
        for i = 1, #boundInts do
            local pos = Vector2.New(boundInts[i].position.x, boundInts[i].position.y)
            local size = Vector2.New(boundInts[i].size.x, boundInts[i].size.y)
            ---设置阻挡格
            CS.SEngine.Map.MapService.Instance:SetCanMovePoint(mapId, pos, size)
        end
    end
    local furnitureConfigs = Config.GetConfigByField(ConfigManager.furniture, "house_type", { mapId })
    for i = 1, #furnitureConfigs do
        local furnitureBounds = self.FurnitureBoundDic[furnitureConfigs[i].id]
        if furnitureBounds ~= nil then
            for j = 1, #furnitureBounds do
                local pos = Vector2.New(furnitureBounds[j].position.x, furnitureBounds[j].position.y)
                local size = Vector2.New(furnitureBounds[j].size.x, furnitureBounds[j].size.y)
                ---设置阻挡格
                CS.SEngine.Map.MapService.Instance:SetCanMovePoint(mapId, pos, size)
            end
        end
    end

    for i =1 , #furnitureConfigs do
        local FurniturePos = self.FurniturePosDic[furnitureConfigs[i].id]
        if FurniturePos ~= nil then
            for j = 1, #FurniturePos do
                local pos = Vector2.New(FurniturePos[j].x, FurniturePos[j].y)
                local size = Vector2.New(1, 1)
                ---设置站立格
                CS.SEngine.Map.MapService.Instance:SetCanStand(mapId, pos, size)
            end
        end
    end

    for i =1 , #furnitureConfigs do
        local FurnitureUse = self.FurnitureUsePosDic[furnitureConfigs[i].id]
        if FurnitureUse ~= nil then
            for j = 1, #FurnitureUse do
                local pos = Vector2.New(FurnitureUse[j].x, FurnitureUse[j].y)
                local size = Vector2.New(1, 1)
                ---设置交互格
                CS.SEngine.Map.MapService.Instance:SetCanInteract(mapId, pos, size)
            end
        end
    end

    for i =1 , #furnitureConfigs do
        local FurnitureQueue = self.FurnitureQueuePosDic[furnitureConfigs[i].id]
        if FurnitureQueue ~= nil then
            for j = 1, #FurnitureQueue do
                local pos = Vector2.New(FurnitureQueue[j].x, FurnitureQueue[j].y)
                local size = Vector2.New(1, 1)
                ---设置排队格
                CS.SEngine.Map.MapService.Instance:SetCanQueue(mapId, pos, size)
            end
        end
    end
    for i =1 , #furnitureConfigs do
        local FurnitureCoinPos = self.FurnitureCoinPosDic[furnitureConfigs[i].id]
        if FurnitureCoinPos ~= nil then
            for j = 1, #FurnitureCoinPos do
                local pos = Vector2.New(FurnitureCoinPos[j].x, FurnitureCoinPos[j].y)
                local size = Vector2.New(1, 1)
                ---设置金币掉落格
                CS.SEngine.Map.MapService.Instance:SetCanCoinPos(mapId, pos, size)
            end
        end
    end
    
end
function MapManager:IsMapInit()
    return self.InitComplete --AppSetting.TileMapEnable and
end

---初始化所有地图
function MapManager:InitAllMap()
    for i, v in pairs(MapManager.eMapId) do
        self:InitMap(v)
    end
    self.InitComplete = true
end

-----场景寻路
-----@param mapId number 地图id
-----@param from Vector3 开始坐标
-----@param to Vector3 结束坐标
-----@return Vector3[] 路点
function MapManager:GetPath(mapId, from, to)
    return CS.SEngine.Map.MapService.Instance:GetPath(mapId, from, to)
end

-----@param mapId number 地图id
-----@param tileX number x坐标
-----@param tileY number y坐标
---@return Vector3
function MapManager:CellToLocal(mapId, tileX, tileY)
    if self:IsMapInit() then
        local pos = Vector3.New(tileX, tileY, 0)
        local retPos = CS.SEngine.Map.MapService.Instance:CellPosToLocalPos(pos, mapId)

        local ret = Vector3.New(retPos.x, retPos.y, retPos.z)
        --if mapId == 1001 then
        --    return ret:Add(Vector3.New(-494.2,-130.4))
        --else
        return ret
        --end
    else
        return self:GetLocalPos(mapId, Vector2.New(tileX, tileY))
    end
end

-----@param mapId number 地图id
-----@param pos Vector3 坐标
---@return number,number
function MapManager:LocalToCell(mapId, pos)
    if self:IsMapInit() then
        --if mapId == 1001 then
        --    pos = pos:Sub(Vector3.New(-494.2,-130.4))
        --end
        local cellPos = CS.SEngine.Map.MapService.Instance:LocalPosToCellPos(pos, mapId)
        return cellPos.x, cellPos.y
    else
        local cellPos = self:GetTilePos(mapId, pos)
        return cellPos.x, cellPos.y
    end
end
--endregion --------------------------------地图组件接口 --------------------------
return MapManager
