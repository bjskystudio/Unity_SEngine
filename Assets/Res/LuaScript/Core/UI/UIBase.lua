---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Simon.L.
--- DateTime: 2022/9/30 15:37
---

local EventManager = require("EventManager")
local EventID = require("EventID")
local UIManager = require("UIManager")
local ResLoadManager = require("ResLoadManager")
local ResTypeEnum = require("ResTypeEnum")

---@class UIBase @窗口基类
---@field public UIName string @窗口名
---@field public AssetPath string @窗口asset路径
---@field public UISetting string @窗口设置
---@field public UIParam string @窗口传递参数
---@field public ParentNode string @窗口父对象
---@field public IsLoaded boolean @是否加载完成
---@field public IsOpened boolean @窗口是否打开
---@field private IsBlur boolean @是否被模糊
local UIBase = Class("UIBase")

---@class ViewActiveState @窗口显隐标志位
---@field None number @无显隐标志位
---@field LogicalState number @逻辑显隐标志位(有值标识隐藏)
---@field FullScreenStrategyState number @全屏策略显隐标志位(有值标识隐藏)
local ViewActiveState =
{
    None = 0,
    LogicalState = 1 << 0,
    FullScreenStrategyState = 1 << 1,
}
---窗口构造函数
---@private
function UIBase:__init()
    self.IsLoaded = false
    self.IsOpened = false
    self.IsBlur = false
    self.HideFlag = ViewActiveState.None
end

---是否可用(动态加载在未加载完成前被使用可能需要判定)
---@return boolean @是否可用
function UIBase:IsAvalible()
    return self.IsOpened == true and self.IsLoaded == true
end

---是否可见(必须通过此接口判定窗口显隐)
---@return boolean @是否可见
function UIBase:IsActive()
    return self.HideFlag == ViewActiveState.None
end

---设置可见
---@param active boolean @设置是否可见
---@param flag ViewActiveState @设置显隐原因标志位
function UIBase:SetActive(active, flag)
    active = active or false
    flag = flag or ViewActiveState.LogicalState
    local preactive = self:IsActive()
    if active == false then
        self.HideFlag = self.HideFlag | flag
    else
        local hasflag = (self.HideFlag & flag > 0)
        if hasflag then
            local reverseflag = ~flag
            self.HideFlag = self.HideFlag & reverseflag
        end
    end

    local isactive = self:IsActive()
    --if self:IsAvalible() and self.ViewInstance.activeSelf ~= isactive then
    --    self.ViewInstance:SetActive(Bool2Num(isactive))
    --end
    if preactive ~= isactive then
        if self:IsAvalible() then
            self.ViewInstance:SetActive(Bool2Num(isactive))
        end
        if isactive then
            self:OnEnable()
            EventManager:GetInstance():Broadcast(EventID.OnViewShow, self, flag)
        else
            self:OnDisable()
            EventManager:GetInstance():Broadcast(EventID.OnViewHide, self, flag)
        end
    end
end

---设置模糊
---@param value boolean @设置是否模糊
function UIBase:SetBlur(value)
    self.IsBlur = value
    if value then
        self.ViewInstance:SetParent(UIManager:GetInstance().BlurUIRoot)
    else
        self.ViewInstance:SetParent(UIManager:GetInstance().NormalUIRoot)
    end
end

---是否已被模糊
---@return boolean
function UIBase:IsBlur()
    return self.IsBlur
end


---初始化窗口(子类请勿使用)
---@private
---@param name string @窗口脚本名
---@param uiPath string @窗口asset路径
---@param uiSetting UISetting @窗口信息
---@param parentnode UnityEngine.Transform @窗口挂载节点
---@param onopencompletedcb fun(UIBase) @窗口完全打开回调(OnCreate之后)
---@param ... any @窗口自定义参数
function UIBase:_Init(name,uiPath,uiSetting, parentnode, onopencompletedcb, ...)
    self.UIName = name
    self.AssetPath = uiPath
    self.UISetting = uiSetting
    self.ParentNode = parentnode
    self.OnOpencompletedCB = onopencompletedcb
    self.UIParam = table_pack(...)
    self.IsLoaded = false
    self.IsOpened = true
    self:LoadRes()
end

---资源加载
---@private
function UIBase:LoadRes()
    ResLoadManager:GetInstance():LoadObj(self.AssetPath, ResTypeEnum.ePrefab, true, handler(self, self.OnLoadResCompleted))
end

---资源加载完成回调
---@private
---@param go UnityEngine.GameObject @资源实体对象
function UIBase:OnLoadResCompleted(go)
    --if not self.IsOpened then
    --    Logger.Warning("窗口已关闭，直接销毁加载完成资源对象:%s!", go.name)
    --    -- 资源加载回来后子组件已经无效了，直接删除实体对象
    --    go:DestroyGameObj()
    --    return
    --end
    --
    --self.IsLoaded = true
    --self.ViewInstance = go
    --self.ViewTransform = self.ViewInstance.transform
    --self.ViewTransform:SetParent(self.ParentNode, false)
    --self.ViewInstance:SetActive(self:IsActive())
    --self:CreateViewRootComponent()
    --self.go_table = GetAutoGoTable(self.ViewInstance, handler(self, self.OnBaseClickBtn), handler(self, self.OnClickToggle))
    --self:UpdateOrder()
    --self:InitCommonComponent()
    --self:Awake()
    ----self.ViewInstance:SetAnimatorTrigger("Open")
    ----GameUtil.PlayOneShotAuido(GlobalDefine.eAudioSid.JieMianDakai)
    --EventManager:GetInstance():Register(self)
    --self:OnCreate(table_unpack(self.Datas))
    --self:OnEnable()
    --if self.OnOpencompletedCB ~= nil then
    --    self.OnOpencompletedCB(self)
    --    self.OnOpencompletedCB = nil
    --end
end


---@return UIBase @窗口基类
return UIBase