---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Simon.L.
--- DateTime: 2022/9/30 15:38
---
local UILayerEnum = require("UILayerEnum")
local EventManager = require("EventManager")
local Log = require("Log")
local EventID = require("EventID")
local tableInsert = table.insert
local tableRemovebyvalue = table.removebyvalue

---@class UIManager : Singleton @UI管理单例类
---@field public UICamera UnityEngine.Camera @UI摄像机
---@field public BlurCamera UnityEngine.Camera @BlurUI摄像机
---@field public SceneUIRoot UnityEngine.Transform @SceneUIRoot根节点
---@field public NormalUIRoot UnityEngine.Transform @NormalUI根节点
---@field public BlurUIRoot UnityEngine.Transform @BlurUI根节点
---@field private LayerAllOpenedViewMap table<UILayerEnum, table<string, UIBase>> @UI Layer对应所有已打开的窗口集合(Key为UI Layer值,Value为该Layer已打开窗口映射Map--为了获取Layer最高Order时避免不必要的窗口遍历)
---@field private AllOpenedViewList UIBase[] @当前所有已打开的窗口列表(用列表的原因是为了确保和打开顺序一致)
local UIManager = Class("UIManager", Singleton)

---@private
function UIManager:__init()
    self.LayerAllOpenedViewMap = {}

    for _, uilayer in pairs(UILayerEnum) do
        self.LayerAllOpenedViewMap[uilayer] = {}
    end

    self.AllOpenedViewList = {}
    self:InitUIRoot()
end

---初始化UI根节点
---@private
function UIManager:InitUIRoot()
    self.UICamera = CSUIModel.UICamera
    self.BlurCamera = CSUIModel.BlurCamera
    self.SceneUIRoot = CSUIModel.SceneUIRoot
    self.NormalUIRoot = CSUIModel.NormalUIRoot
    self.BlurUIRoot = CSUIModel.BlurUIRoot
end

--- 获取指定UILayer的挂载节点
---@private
---@param uilayer UILayerEnum @UI层级
---@return UnityEngine.Transform @指定UILayer对应的挂载节点
function UIManager:GetLayerTransform(uilayer)
    if uilayer == UILayerEnum.SceneLayer then
        return self.SceneUIRoot
    else
        return self.NormalUIRoot
    end
end


---打开指定窗口
---@param scriptName string @窗口脚本名
---@param uiPath string @窗口asset路径
---@param uiSetting UISetting @窗口setting
---@param ... any @窗口传参
---@return UIBase @窗口对象
function UIManager:OpenWindow(scriptName,uiPath,uiSetting, ...)
    if not self:IsWindowOpened(scriptName) then

        local layer = (uiSetting and uiSetting.Layer) or UILayerEnum.MainLayer
        local uiviewparentnode = self:GetLayerTransform(layer)
        local viewclass = require(scriptName)

        -- 进入模糊
        --local isBlur =  (uiSetting and uiSetting.IsBlur) or false
        --if isBlur then
        --    self:SetCurViewBlur(true)
        --end

        -- 每一次都New一个对象来支持异步加载等概念
        ---@type UIBase
        local viewinstance = viewclass.New()
        tableInsert(self.AllOpenedViewList, viewinstance)
        self.LayerAllOpenedViewMap[layer][scriptName] = viewinstance
        viewinstance:_Init(scriptName,uiPath,uiSetting, uiviewparentnode, handler(self, self.OnWindowOpenCompleted), ...)
        EventManager:GetInstance():Broadcast(EventID.OnViewOpened, scriptName)
        return viewinstance
    else
        Log.Error("窗口名:%s已打开,无法重复打开!", scriptName)
        return nil
    end
end

---窗口完全打开回调(OnShow之后)
---@private
---@param viewinstance UIBase @打开的窗口
function UIManager:OnWindowOpenCompleted(viewinstance)
    EventManager:GetInstance():Broadcast(EventID.OnViewCompletedOpened, viewinstance)
end



---@class UISetting  @UI窗口配置
---@field public Layer string @UI窗口层
---@field public IsBlur string @UI 是否模糊背景