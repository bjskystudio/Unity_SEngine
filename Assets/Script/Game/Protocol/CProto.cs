// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from CProto.proto</summary>
  public static partial class CProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for CProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDUHJvdG8ucHJvdG8SCHByb3RvY29sInQKCUxvZ2luSW5mbxITCgtBY2Nv",
            "dW50VHlwZRgBIAEoBRIPCgdBY2NvdW50GAIgASgJEg0KBVRva2VuGAMgASgJ",
            "Eg4KBlVzZXJJRBgEIAEoAxIQCghTZXJ2ZXJJRBgGIAEoBRIQCghVc2VyTmFt",
            "ZRgHIAEoCSJ2CghVc2VySW5mbxIiCgRVc2VyGAEgASgLMhQucHJvdG9jb2wu",
            "U2ltcGxlVXNlchIQCghWaXBMZXZlbBgEIAEoBRIRCglDaGFwdGVySUQYBSAB",
            "KAUSEgoKUmVnaXN0ZXJNcxgHIAEoAxINCgVJc05ldxgIIAEoCCK2AQoKU2lt",
            "cGxlVXNlchIOCgZVc2VySUQYASABKAMSDAoETmFtZRgCIAEoCRINCgVQb3dl",
            "chgDIAEoAxIMCgRJY29uGAQgASgFEg4KBkF2YXRhchgFIAEoCRIUCgxIb21l",
            "U2VydmVySUQYBiABKAUSGAoQUmVnaXN0ZXJTZXJ2ZXJJRBgHIAEoBRINCgVM",
            "ZXZlbBgJIAEoBRIRCglJY29uRnJhbWUYCiABKAUSCwoDU2V4GAsgASgFYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoginInfo), global::Protocol.LoginInfo.Parser, new[]{ "AccountType", "Account", "Token", "UserID", "ServerID", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UserInfo), global::Protocol.UserInfo.Parser, new[]{ "User", "VipLevel", "ChapterID", "RegisterMs", "IsNew" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SimpleUser), global::Protocol.SimpleUser.Parser, new[]{ "UserID", "Name", "Power", "Icon", "Avatar", "HomeServerID", "RegisterServerID", "Level", "IconFrame", "Sex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LoginInfo : pb::IMessage<LoginInfo> {
    private static readonly pb::MessageParser<LoginInfo> _parser = new pb::MessageParser<LoginInfo>(() => new LoginInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.CProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfo(LoginInfo other) : this() {
      accountType_ = other.accountType_;
      account_ = other.account_;
      token_ = other.token_;
      userID_ = other.userID_;
      serverID_ = other.serverID_;
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfo Clone() {
      return new LoginInfo(this);
    }

    /// <summary>Field number for the "AccountType" field.</summary>
    public const int AccountTypeFieldNumber = 1;
    private int accountType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    /// 帐号信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 4;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 6;
    private int serverID_;
    /// <summary>
    /// 创建角色有用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 7;
    private string userName_ = "";
    /// <summary>
    /// 角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountType != other.AccountType) return false;
      if (Account != other.Account) return false;
      if (Token != other.Token) return false;
      if (UserID != other.UserID) return false;
      if (ServerID != other.ServerID) return false;
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountType);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (UserID != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserID);
      }
      if (ServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountType);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginInfo other) {
      if (other == null) {
        return;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountType = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            UserID = input.ReadInt64();
            break;
          }
          case 48: {
            ServerID = input.ReadInt32();
            break;
          }
          case 58: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.CProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vipLevel_ = other.vipLevel_;
      chapterID_ = other.chapterID_;
      registerMs_ = other.registerMs_;
      isNew_ = other.isNew_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Protocol.SimpleUser user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SimpleUser User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "VipLevel" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private int vipLevel_;
    /// <summary>
    /// vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "ChapterID" field.</summary>
    public const int ChapterIDFieldNumber = 5;
    private int chapterID_;
    /// <summary>
    /// 章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterID {
      get { return chapterID_; }
      set {
        chapterID_ = value;
      }
    }

    /// <summary>Field number for the "RegisterMs" field.</summary>
    public const int RegisterMsFieldNumber = 7;
    private long registerMs_;
    /// <summary>
    /// 注册时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RegisterMs {
      get { return registerMs_; }
      set {
        registerMs_ = value;
      }
    }

    /// <summary>Field number for the "IsNew" field.</summary>
    public const int IsNewFieldNumber = 8;
    private bool isNew_;
    /// <summary>
    /// 是否新建角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VipLevel != other.VipLevel) return false;
      if (ChapterID != other.ChapterID) return false;
      if (RegisterMs != other.RegisterMs) return false;
      if (IsNew != other.IsNew) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (ChapterID != 0) hash ^= ChapterID.GetHashCode();
      if (RegisterMs != 0L) hash ^= RegisterMs.GetHashCode();
      if (IsNew != false) hash ^= IsNew.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (ChapterID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChapterID);
      }
      if (RegisterMs != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RegisterMs);
      }
      if (IsNew != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsNew);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (ChapterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterID);
      }
      if (RegisterMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegisterMs);
      }
      if (IsNew != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Protocol.SimpleUser();
        }
        User.MergeFrom(other.User);
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.ChapterID != 0) {
        ChapterID = other.ChapterID;
      }
      if (other.RegisterMs != 0L) {
        RegisterMs = other.RegisterMs;
      }
      if (other.IsNew != false) {
        IsNew = other.IsNew;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Protocol.SimpleUser();
            }
            input.ReadMessage(User);
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 40: {
            ChapterID = input.ReadInt32();
            break;
          }
          case 56: {
            RegisterMs = input.ReadInt64();
            break;
          }
          case 64: {
            IsNew = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleUser : pb::IMessage<SimpleUser> {
    private static readonly pb::MessageParser<SimpleUser> _parser = new pb::MessageParser<SimpleUser>(() => new SimpleUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.CProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleUser(SimpleUser other) : this() {
      userID_ = other.userID_;
      name_ = other.name_;
      power_ = other.power_;
      icon_ = other.icon_;
      avatar_ = other.avatar_;
      homeServerID_ = other.homeServerID_;
      registerServerID_ = other.registerServerID_;
      level_ = other.level_;
      iconFrame_ = other.iconFrame_;
      sex_ = other.sex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleUser Clone() {
      return new SimpleUser(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 3;
    private long power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 4;
    private int icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "Avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HomeServerID" field.</summary>
    public const int HomeServerIDFieldNumber = 6;
    private int homeServerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HomeServerID {
      get { return homeServerID_; }
      set {
        homeServerID_ = value;
      }
    }

    /// <summary>Field number for the "RegisterServerID" field.</summary>
    public const int RegisterServerIDFieldNumber = 7;
    private int registerServerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegisterServerID {
      get { return registerServerID_; }
      set {
        registerServerID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 9;
    private int level_;
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "IconFrame" field.</summary>
    public const int IconFrameFieldNumber = 10;
    private int iconFrame_;
    /// <summary>
    /// 头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IconFrame {
      get { return iconFrame_; }
      set {
        iconFrame_ = value;
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 11;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Name != other.Name) return false;
      if (Power != other.Power) return false;
      if (Icon != other.Icon) return false;
      if (Avatar != other.Avatar) return false;
      if (HomeServerID != other.HomeServerID) return false;
      if (RegisterServerID != other.RegisterServerID) return false;
      if (Level != other.Level) return false;
      if (IconFrame != other.IconFrame) return false;
      if (Sex != other.Sex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Power != 0L) hash ^= Power.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (HomeServerID != 0) hash ^= HomeServerID.GetHashCode();
      if (RegisterServerID != 0) hash ^= RegisterServerID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (IconFrame != 0) hash ^= IconFrame.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Power != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Power);
      }
      if (Icon != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Icon);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Avatar);
      }
      if (HomeServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HomeServerID);
      }
      if (RegisterServerID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RegisterServerID);
      }
      if (Level != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Level);
      }
      if (IconFrame != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IconFrame);
      }
      if (Sex != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Sex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Power != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Power);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Icon);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (HomeServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HomeServerID);
      }
      if (RegisterServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegisterServerID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (IconFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IconFrame);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleUser other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Power != 0L) {
        Power = other.Power;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.HomeServerID != 0) {
        HomeServerID = other.HomeServerID;
      }
      if (other.RegisterServerID != 0) {
        RegisterServerID = other.RegisterServerID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.IconFrame != 0) {
        IconFrame = other.IconFrame;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Power = input.ReadInt64();
            break;
          }
          case 32: {
            Icon = input.ReadInt32();
            break;
          }
          case 42: {
            Avatar = input.ReadString();
            break;
          }
          case 48: {
            HomeServerID = input.ReadInt32();
            break;
          }
          case 56: {
            RegisterServerID = input.ReadInt32();
            break;
          }
          case 72: {
            Level = input.ReadInt32();
            break;
          }
          case 80: {
            IconFrame = input.ReadInt32();
            break;
          }
          case 88: {
            Sex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
