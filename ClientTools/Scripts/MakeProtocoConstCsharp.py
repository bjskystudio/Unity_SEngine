#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
import re
import os, sys

outputDir = sys.argv[2]
inputDir = sys.argv[1]

clientOutDir = os.path.join(outputDir, 'ProtocolEnum.cs')
clientInDir = os.path.join(inputDir, 'ClientCmd.proto')

CMD_MAX_NUM = 20000

#--------------------------------------------
# 替换字符串方法
#--------------------------------------------
#define a function  
def ReplaceStr(s):
    s = s.strip()              #先把两头多余的空格去掉
    return s

#--------------------------------------------
# 解析package name
#--------------------------------------------
#define a function
def GetPackageName(s):
    retStr = ""

    s = s.strip()
    s = s.replace('=', ' ')    #先把所有的'='替换成'空格'
    s = s.replace('{', ' ')    #先把所有的'{'替换成'空格'
    s = s.replace('\t', ' ')   #先把所有的'\t'替换成'空格'
    s = re.sub(r'\s+', '-', s) #把任意多个'空格'替换成'-'

    arrSplit = s.split('-')

    if len(arrSplit) > 1 and arrSplit[0] == "package":
        retStr = arrSplit[1].strip(';')

    return retStr
	
#--------------------------------------------
# 生成模板代码
#--------------------------------------------
#define a function  
def GenerateModuleCode(s):
	retEnumStr = ""
	retTypeMatchStr = ""

	#注释行 不解析
	if len(s) > 0 and s[0] == "#":
            return retEnumStr, retTypeMatchStr
	
	arrSplit = s.split('#')
	arrLength = len(arrSplit)

	if arrLength >= 3:
            #20000以后的cmd不导出
            if int(arrSplit[0]) > CMD_MAX_NUM:
                return retEnumStr, retTypeMatchStr
            retEnumStr += whiteSpaces + whiteSpaces + arrSplit[1] + " = " + arrSplit[0] + ",\n"
            retTypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "_TypeMatchDict" + "[" + arrSplit[0] + "]" + " = " + "typeof(" + arrSplit[2] + ");" + "\n"
    
	return retEnumStr, retTypeMatchStr

#--------------------------------------------
# 读取文件
#--------------------------------------------

#----模板代码
whiteSpaces = "    "
allStr = ""
EnumStr = ""
TypeMatchStr = ""
InfoStr = "//Auto generated by python scrpit.\n" + "//Do Not Modify Directlly!!!\n\n"
UsingDefine = "using Protocol;\n" + "using System.Collections.Generic;\n" + "using System;\n\n"

NameSpaceStart = "namespace Code.Network.Protocol\n{\n"
EnumStart = whiteSpaces + "public enum ProtocolEnum\n" + whiteSpaces + "{\n"
EnumEnd = whiteSpaces + "}\n\n"
TypeMatchStart = whiteSpaces + "public static class ProtocolTypeMatch\n"
TypeMatchEnd = whiteSpaces + "}\n"
NameSpaceEnd = "}\n"

#先把定义写在开头
allStr += InfoStr
allStr += UsingDefine
allStr += NameSpaceStart

EnumStr += EnumStart

TypeMatchStr += TypeMatchStart
TypeMatchStr += whiteSpaces + "{\n"
TypeMatchStr += whiteSpaces + whiteSpaces + "private static Dictionary<int, Type> _TypeMatchDict;\n\n"
TypeMatchStr += whiteSpaces + whiteSpaces + "public static Type GetType(ProtocolEnum cmd)\n" + whiteSpaces + whiteSpaces + "{\n"
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "int iCmd = (int)cmd;\n\n" 
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "if(_TypeMatchDict.TryGetValue(iCmd, out Type value))\n"
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "{\n"
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + whiteSpaces + "return value;\n"
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "}\n"
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "return default(Type);\n"
TypeMatchStr += whiteSpaces + whiteSpaces + "}\n\n"
TypeMatchStr += whiteSpaces + whiteSpaces + "static ProtocolTypeMatch()\n"
TypeMatchStr += whiteSpaces + whiteSpaces + "{\n"
TypeMatchStr += whiteSpaces + whiteSpaces + whiteSpaces + "_TypeMatchDict = new Dictionary<int, Type>();\n\n"

#files = os.listdir(".")
#files = [f for f in files if f.endswith(".proto")]

#for file in files:
fileRead = open(clientInDir)             # 返回一个文件对象  
line = fileRead.readline()             # 调用文件的 readline()方法
                        
while line:
    rptStr = ""
    rptStr1 = ""
    rptStr = ReplaceStr(line)          #自己写的替换字符串
    rptStr, rptStr1 = GenerateModuleCode(rptStr)
    
    EnumStr += rptStr
    TypeMatchStr += rptStr1
    line = fileRead.readline()

fileRead.close()

EnumStr += EnumEnd
TypeMatchStr += whiteSpaces + whiteSpaces + "}\n"
TypeMatchStr += TypeMatchEnd

allStr += EnumStr
allStr += TypeMatchStr
allStr += NameSpaceEnd
#--------生成代码结束

#--------------------------------------------
# 写文件
#--------------------------------------------
fileWrite = open(clientOutDir, 'w')
fileWrite.write(allStr)
fileWrite.close( )
print "Generated ProtocolEnum.cs!"
